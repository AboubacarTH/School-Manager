/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.panel;

import bean.Droit;
import bean.Journal;
import bean.User;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Objects;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import main.Main;
import static main.Main.getController;
import static main.Main.getDroit;
import view.dialog.UserDialog;

/**
 *
 * @author ATH
 */
public class ComptePanel extends javax.swing.JPanel {

    /**
     * Creates new form ComptePanel
     */
    public ComptePanel() {
        id_users = new HashMap<>();
        initComponents();
        date_chooser.setDate(new Date());
        initDroit();
        table_utilisateur();
        table_journal();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table_utilisateur = new javax.swing.JTable();
        button_ajout_administrateur = new javax.swing.JButton();
        button_modifier_compte = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_journal = new javax.swing.JTable();
        button_vider_journal = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        text_field_rechercher = new javax.swing.JTextField();
        date_chooser = new com.toedter.calendar.JDateChooser();
        button_selection_date = new javax.swing.JButton();
        btn_activer_all_saisie_s1 = new javax.swing.JButton();
        btn_desactiver_all_saisie_s1 = new javax.swing.JButton();
        btn_activer_all_saisie_s2 = new javax.swing.JButton();
        btn_desactiver_all_saisie_s2 = new javax.swing.JButton();

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Liste des utilisateurs"));

        table_utilisateur.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "N°", "N° Matricule", "Nom et Prénom", "Administrateur", "Professeur", "Ajout", "Modification", "Supression", "S1", "S2", "Dernière Connexion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_utilisateur);
        if (table_utilisateur.getColumnModel().getColumnCount() > 0) {
            table_utilisateur.getColumnModel().getColumn(0).setMinWidth(35);
            table_utilisateur.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_utilisateur.getColumnModel().getColumn(0).setMaxWidth(35);
            table_utilisateur.getColumnModel().getColumn(1).setPreferredWidth(75);
            table_utilisateur.getColumnModel().getColumn(1).setMaxWidth(100);
            table_utilisateur.getColumnModel().getColumn(2).setPreferredWidth(200);
            table_utilisateur.getColumnModel().getColumn(3).setPreferredWidth(100);
            table_utilisateur.getColumnModel().getColumn(3).setMaxWidth(110);
            table_utilisateur.getColumnModel().getColumn(4).setPreferredWidth(75);
            table_utilisateur.getColumnModel().getColumn(4).setMaxWidth(100);
            table_utilisateur.getColumnModel().getColumn(5).setPreferredWidth(75);
            table_utilisateur.getColumnModel().getColumn(5).setMaxWidth(100);
            table_utilisateur.getColumnModel().getColumn(6).setPreferredWidth(75);
            table_utilisateur.getColumnModel().getColumn(6).setMaxWidth(100);
            table_utilisateur.getColumnModel().getColumn(7).setPreferredWidth(75);
            table_utilisateur.getColumnModel().getColumn(7).setMaxWidth(100);
            table_utilisateur.getColumnModel().getColumn(8).setPreferredWidth(75);
            table_utilisateur.getColumnModel().getColumn(8).setMaxWidth(100);
            table_utilisateur.getColumnModel().getColumn(9).setPreferredWidth(75);
            table_utilisateur.getColumnModel().getColumn(9).setMaxWidth(100);
            table_utilisateur.getColumnModel().getColumn(10).setPreferredWidth(150);
            table_utilisateur.getColumnModel().getColumn(10).setMaxWidth(180);
        }

        button_ajout_administrateur.setText("Ajouter un Adminitrateur");
        button_ajout_administrateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_ajout_administrateurActionPerformed(evt);
            }
        });

        button_modifier_compte.setText("Modifier le compte");
        button_modifier_compte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_modifier_compteActionPerformed(evt);
            }
        });

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Journal des connexions"));

        table_journal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "N°", "Nom et Prénom", "Type Compte", "Date et Heure Connectée"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(table_journal);
        if (table_journal.getColumnModel().getColumnCount() > 0) {
            table_journal.getColumnModel().getColumn(0).setMinWidth(35);
            table_journal.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_journal.getColumnModel().getColumn(0).setMaxWidth(35);
            table_journal.getColumnModel().getColumn(2).setPreferredWidth(200);
            table_journal.getColumnModel().getColumn(2).setMaxWidth(240);
            table_journal.getColumnModel().getColumn(3).setPreferredWidth(200);
        }

        button_vider_journal.setText("Vider le journal");
        button_vider_journal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_vider_journalActionPerformed(evt);
            }
        });

        jLabel1.setText("Rechercher :");

        text_field_rechercher.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                text_field_rechercherKeyReleased(evt);
            }
        });

        button_selection_date.setText("Sélectionner entre la date");
        button_selection_date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_selection_dateActionPerformed(evt);
            }
        });

        btn_activer_all_saisie_s1.setText("Activer toutes les saisies pour S1");
        btn_activer_all_saisie_s1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_activer_all_saisie_s1ActionPerformed(evt);
            }
        });

        btn_desactiver_all_saisie_s1.setText("Désactiver toutes les saisies pour s1");
        btn_desactiver_all_saisie_s1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_desactiver_all_saisie_s1ActionPerformed(evt);
            }
        });

        btn_activer_all_saisie_s2.setText("Activer toutes les saisies pour S2");
        btn_activer_all_saisie_s2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_activer_all_saisie_s2ActionPerformed(evt);
            }
        });

        btn_desactiver_all_saisie_s2.setText("Désactiver toutes les saisies pour s2");
        btn_desactiver_all_saisie_s2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_desactiver_all_saisie_s2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(button_vider_journal)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(text_field_rechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(button_selection_date)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(date_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(button_ajout_administrateur)
                                .addGap(18, 18, 18)
                                .addComponent(button_modifier_compte)
                                .addGap(18, 18, 18)
                                .addComponent(btn_activer_all_saisie_s1)
                                .addGap(18, 18, 18)
                                .addComponent(btn_activer_all_saisie_s2)
                                .addGap(18, 18, 18)
                                .addComponent(btn_desactiver_all_saisie_s1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_desactiver_all_saisie_s2)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_ajout_administrateur)
                    .addComponent(button_modifier_compte)
                    .addComponent(btn_activer_all_saisie_s1)
                    .addComponent(btn_desactiver_all_saisie_s1)
                    .addComponent(btn_activer_all_saisie_s2)
                    .addComponent(btn_desactiver_all_saisie_s2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(button_vider_journal)
                        .addComponent(jLabel1)
                        .addComponent(text_field_rechercher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(button_selection_date))
                    .addComponent(date_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void button_ajout_administrateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_ajout_administrateurActionPerformed
        ajout_administrateur();
        table_journal();
    }//GEN-LAST:event_button_ajout_administrateurActionPerformed

    private void button_modifier_compteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_modifier_compteActionPerformed
        modifier_administrateur();
        table_journal();
    }//GEN-LAST:event_button_modifier_compteActionPerformed

    private void button_selection_dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_selection_dateActionPerformed
        table_journal();
    }//GEN-LAST:event_button_selection_dateActionPerformed

    private void text_field_rechercherKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_text_field_rechercherKeyReleased
        table_journal();
    }//GEN-LAST:event_text_field_rechercherKeyReleased

    private void button_vider_journalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_vider_journalActionPerformed
        suprimer_journal();
    }//GEN-LAST:event_button_vider_journalActionPerformed

    private void btn_activer_all_saisie_s1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_activer_all_saisie_s1ActionPerformed
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir activer la saisie pour tous les enseignents pour les notes S1 ?", "Information", JOptionPane.YES_NO_OPTION);
        if (choice == 0) {
            getController().getDroitController().activeAllSaisieProfS1();
            table_utilisateur();
        }

    }//GEN-LAST:event_btn_activer_all_saisie_s1ActionPerformed

    private void btn_desactiver_all_saisie_s1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_desactiver_all_saisie_s1ActionPerformed
        getController().getDroitController().desactiveAllSaisieProfS1();
        table_utilisateur();
    }//GEN-LAST:event_btn_desactiver_all_saisie_s1ActionPerformed

    private void btn_activer_all_saisie_s2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_activer_all_saisie_s2ActionPerformed
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir activer la saisie pour tous les enseignents pour les notes S2 ?", "Information", JOptionPane.YES_NO_OPTION);
        if (choice == 0) {
            getController().getDroitController().activeAllSaisieProfS2();
            table_utilisateur();
        }
    }//GEN-LAST:event_btn_activer_all_saisie_s2ActionPerformed

    private void btn_desactiver_all_saisie_s2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_desactiver_all_saisie_s2ActionPerformed
        getController().getDroitController().desactiveAllSaisieProfS2();
        table_utilisateur();
    }//GEN-LAST:event_btn_desactiver_all_saisie_s2ActionPerformed
    private final HashMap<Integer, Long> id_users;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_activer_all_saisie_s1;
    private javax.swing.JButton btn_activer_all_saisie_s2;
    private javax.swing.JButton btn_desactiver_all_saisie_s1;
    private javax.swing.JButton btn_desactiver_all_saisie_s2;
    private javax.swing.JButton button_ajout_administrateur;
    private javax.swing.JButton button_modifier_compte;
    private javax.swing.JButton button_selection_date;
    private javax.swing.JButton button_vider_journal;
    private com.toedter.calendar.JDateChooser date_chooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table_journal;
    private javax.swing.JTable table_utilisateur;
    private javax.swing.JTextField text_field_rechercher;
    // End of variables declaration//GEN-END:variables

    private void table_utilisateur() {
        DefaultTableModel model = (DefaultTableModel) table_utilisateur.getModel();
        model.setRowCount(0);
        id_users.clear();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd MMM yyyy à HH:mm:ss");
        ArrayList<User> list = getController().getUserController().gets(null);
        for (int i = 0; i < list.size(); i++) {
            Object row[] = new Object[11];
            Droit droit = getController().getDroitController().get(list.get(i).getId());
            if (droit == null) {
                getController().getDroitController().add(list.get(i).getId(), false, true, false, false, false, false, false, false);
            }
            Journal journal = getController().getJournalController().get(list.get(i).getId());
            row[0] = i + 1;
            if (droit != null) {
                if (droit.isProfesseur()) {
                    row[1] = list.get(i).getLogin();
                } else {
                    row[1] = "";
                }
            } else {
                row[1] = "";
            }
            row[2] = list.get(i).getNom_prenom();
            row[3] = droit == null ? "o" : droit.isAdministration() ? "x" : "";
            row[4] = droit == null ? "o" : droit.isProfesseur() ? "x" : "";
            row[5] = droit == null ? "o" : droit.isAjouter() ? "x" : "";
            row[6] = droit == null ? "o" : droit.isModifier() ? "x" : "";
            row[7] = droit == null ? "o" : droit.isSuprimer() ? "x" : "";
            row[8] = droit == null ? "o" : droit.isS1() ? "x" : "";
            row[9] = droit == null ? "o" : droit.isS2() ? "x" : "";
            if (journal != null) {
                row[10] = simpleDateFormat.format(journal.getDate());
            } else {
                row[10] = "---";
            }
            id_users.put(i, list.get(i).getId());
            model.addRow(row);
        }
        table_utilisateur.setModel(model);
        table_utilisateur.setShowVerticalLines(true);
        table_utilisateur.setShowHorizontalLines(true);
    }

    private void table_journal() {
        Thread thread = new Thread(() -> {
            DefaultTableModel model = (DefaultTableModel) table_journal.getModel();
            model.setRowCount(0);
            java.sql.Date date = null;
            String recherche = null;
            if (!text_field_rechercher.getText().isEmpty()) {
                recherche = text_field_rechercher.getText();
            }
            if (date_chooser.getDate() != null) {
                date = new java.sql.Date(date_chooser.getDate().getTime());
            }
            try {
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd MMM yyyy à HH:mm:ss");
                ArrayList<Journal> list = getController().getJournalController().gets(null, date, recherche);
                for (int i = 0; i < list.size(); i++) {
                    Object row[] = new Object[4];
                    Droit droit = getController().getDroitController().get(list.get(i).getId_user());
                    if (droit == null) {
                        getController().getDroitController().add(list.get(i).getId(), false, true, false, false, false, false, false, false);
                    }
                    row[0] = i + 1;
                    row[1] = getController().getUserController().get(list.get(i).getId_user()).getNom_prenom();
                    row[2] = droit == null ? "o" : droit.isAdministration() ? "Administrateur" : "Professeur";
                    row[3] = simpleDateFormat.format(list.get(i).getDate());
                    model.addRow(row);
                }
                table_journal.setModel(model);
                table_journal.setShowVerticalLines(true);
                table_journal.setShowHorizontalLines(true);
            } catch (Exception e) {
            }

        });
        thread.start();

    }

    private void ajout_administrateur() {
        if (!getDroit().isAjouter()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        UserDialog userDialog = new UserDialog(null, true);
        userDialog.setVisible(true);
        table_utilisateur();
    }

    private void modifier_administrateur() {
        if (!getDroit().isModifier()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_utilisateur.getSelectedRow();
        if (row < 0) {
            return;
        }
        User user = getController().getUserController().get(id_users.get(row));
        Droit droit_user = getController().getDroitController().get(user.getId());
        if (!getDroit().isAdministration()) {
            return;
        }
        if (!Objects.equals(getDroit().getId(), user.getId()) && !droit_user.isProfesseur()) {
            return;
        }

        UserDialog userDialog = new UserDialog(null, true, user);
        userDialog.setVisible(true);
        table_utilisateur();
    }

    private void suprimer_journal() {
        Droit droit = getController().getDroitController().get(Main.getUser().getId());
        if (!droit.isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer le journal des connexions ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
        if (choice == 0) {
            getController().getJournalController().remove();
            table_journal();
        }

    }

    private void initDroit() {
        Droit droit = getController().getDroitController().get(Main.getUser().getId());
        if (!droit.isAjouter()) {
            if (!droit.isSuprimer()) {
                button_ajout_administrateur.setEnabled(false);
            }
        }
        if (!droit.isModifier()) {
            if (!droit.isSuprimer()) {
                button_modifier_compte.setEnabled(false);
            }
            button_ajout_administrateur.setEnabled(false);
            button_modifier_compte.setEnabled(false);
            btn_activer_all_saisie_s1.setEnabled(false);
            btn_activer_all_saisie_s2.setEnabled(false);
            btn_desactiver_all_saisie_s1.setEnabled(false);
            btn_desactiver_all_saisie_s2.setEnabled(false);
        }
        if (!droit.isSuprimer()) {
            if (!droit.isSuprimer()) {
                button_vider_journal.setEnabled(false);
            }
        }
    }
}
