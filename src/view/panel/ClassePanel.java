/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.panel;

import bean.Annee;
import bean.Classe;
import bean.Cycle;
import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.AbstractCellEditor;
import javax.swing.ButtonModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import static main.Main.getController;
import static main.Main.getDroit;
import view.dialog.ClasseDialog;
import view.dialog.CycleDialog;

/**
 *
 * @author ATH
 */
public class ClassePanel extends javax.swing.JPanel {

    /**
     * Creates new form Classe
     */
    public ClassePanel() {
        id_cycles = new HashMap<>();
        id_classes = new HashMap<>();
        id_annees = new HashMap<>();
        id_table_cycles = new HashMap<>();
        initComponents();
        init_combo_box_annee();
        init_combo_box_cycle();
        table_cycle();
        table_classe();
        popup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup_cycle = new javax.swing.JPopupMenu();
        menu_item_cycle_add = new javax.swing.JMenuItem();
        menu_item_cycle_update = new javax.swing.JMenuItem();
        menu_item_cycle_remove = new javax.swing.JMenuItem();
        popup_classe = new javax.swing.JPopupMenu();
        menu_item_classe_add = new javax.swing.JMenuItem();
        menu_item_classe_update = new javax.swing.JMenuItem();
        menu_item_classe_remove = new javax.swing.JMenuItem();
        scroll_pane_cycle = new javax.swing.JScrollPane();
        table_cycle = new javax.swing.JTable();
        scroll_pane_classe = new javax.swing.JScrollPane();
        table_classe = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        combo_box_annee = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        combo_box_cycle = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        button_add = new javax.swing.JButton();
        button_update = new javax.swing.JButton();
        button_remove = new javax.swing.JButton();

        menu_item_cycle_add.setText("Ajouter");
        menu_item_cycle_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_cycle_addActionPerformed(evt);
            }
        });
        popup_cycle.add(menu_item_cycle_add);

        menu_item_cycle_update.setText("Mettre à jour");
        menu_item_cycle_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_cycle_updateActionPerformed(evt);
            }
        });
        popup_cycle.add(menu_item_cycle_update);

        menu_item_cycle_remove.setText("Suprimer");
        menu_item_cycle_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_cycle_removeActionPerformed(evt);
            }
        });
        popup_cycle.add(menu_item_cycle_remove);

        menu_item_classe_add.setText("Ajouter");
        menu_item_classe_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_classe_addActionPerformed(evt);
            }
        });
        popup_classe.add(menu_item_classe_add);

        menu_item_classe_update.setText("Mettre à jour");
        menu_item_classe_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_classe_updateActionPerformed(evt);
            }
        });
        popup_classe.add(menu_item_classe_update);

        menu_item_classe_remove.setText("Suprimer");
        menu_item_classe_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_classe_removeActionPerformed(evt);
            }
        });
        popup_classe.add(menu_item_classe_remove);

        scroll_pane_cycle.setBorder(javax.swing.BorderFactory.createTitledBorder("Liste des cycles"));

        table_cycle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "N°", "Cycle", "Effectif", "Effectif fille", "Effectif garçon", "Option"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll_pane_cycle.setViewportView(table_cycle);
        if (table_cycle.getColumnModel().getColumnCount() > 0) {
            table_cycle.getColumnModel().getColumn(0).setMaxWidth(35);
            table_cycle.getColumnModel().getColumn(2).setPreferredWidth(100);
            table_cycle.getColumnModel().getColumn(2).setMaxWidth(100);
            table_cycle.getColumnModel().getColumn(3).setPreferredWidth(100);
            table_cycle.getColumnModel().getColumn(3).setMaxWidth(100);
            table_cycle.getColumnModel().getColumn(4).setPreferredWidth(100);
            table_cycle.getColumnModel().getColumn(4).setMaxWidth(100);
            table_cycle.getColumnModel().getColumn(5).setMinWidth(185);
            table_cycle.getColumnModel().getColumn(5).setPreferredWidth(185);
            table_cycle.getColumnModel().getColumn(5).setMaxWidth(185);
        }

        scroll_pane_classe.setBorder(javax.swing.BorderFactory.createTitledBorder("Liste des classes"));

        table_classe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "N°", "Classe", "Cycle", "Effectif", "Effectif fille", "Effectif garçon", "Option"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll_pane_classe.setViewportView(table_classe);
        if (table_classe.getColumnModel().getColumnCount() > 0) {
            table_classe.getColumnModel().getColumn(0).setMaxWidth(35);
            table_classe.getColumnModel().getColumn(2).setPreferredWidth(150);
            table_classe.getColumnModel().getColumn(2).setMaxWidth(150);
            table_classe.getColumnModel().getColumn(3).setPreferredWidth(100);
            table_classe.getColumnModel().getColumn(3).setMaxWidth(100);
            table_classe.getColumnModel().getColumn(4).setPreferredWidth(100);
            table_classe.getColumnModel().getColumn(4).setMaxWidth(100);
            table_classe.getColumnModel().getColumn(5).setPreferredWidth(100);
            table_classe.getColumnModel().getColumn(5).setMaxWidth(100);
            table_classe.getColumnModel().getColumn(6).setMinWidth(185);
            table_classe.getColumnModel().getColumn(6).setPreferredWidth(185);
            table_classe.getColumnModel().getColumn(6).setMaxWidth(185);
        }

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel1.setText("Année :");

        combo_box_annee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_annee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_anneeActionPerformed(evt);
            }
        });

        jLabel2.setText("Cycle :");

        combo_box_cycle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_cycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_cycleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combo_box_annee, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combo_box_cycle, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo_box_annee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(combo_box_cycle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        button_add.setText("Nouveau");
        button_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addActionPerformed(evt);
            }
        });

        button_update.setText("Mettre à jour");

        button_remove.setForeground(new java.awt.Color(153, 0, 0));
        button_remove.setText("Suprimer");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(button_update)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(button_remove)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_add)
                    .addComponent(button_update)
                    .addComponent(button_remove))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll_pane_classe, javax.swing.GroupLayout.DEFAULT_SIZE, 995, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scroll_pane_cycle))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scroll_pane_cycle, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scroll_pane_classe, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void menu_item_cycle_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_cycle_addActionPerformed
        add_cycle();
    }//GEN-LAST:event_menu_item_cycle_addActionPerformed

    private void menu_item_cycle_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_cycle_updateActionPerformed
        update_cycle();
    }//GEN-LAST:event_menu_item_cycle_updateActionPerformed

    private void menu_item_cycle_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_cycle_removeActionPerformed
        remove_cycle();
    }//GEN-LAST:event_menu_item_cycle_removeActionPerformed

    private void menu_item_classe_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_classe_addActionPerformed
        add_classe();
    }//GEN-LAST:event_menu_item_classe_addActionPerformed

    private void menu_item_classe_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_classe_updateActionPerformed
        update_classe();
    }//GEN-LAST:event_menu_item_classe_updateActionPerformed

    private void menu_item_classe_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_classe_removeActionPerformed
        remove_classe();
    }//GEN-LAST:event_menu_item_classe_removeActionPerformed

    private void combo_box_anneeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_anneeActionPerformed
        table_cycle();
        table_classe();
    }//GEN-LAST:event_combo_box_anneeActionPerformed

    private void combo_box_cycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_cycleActionPerformed
        table_cycle();
        table_classe();
    }//GEN-LAST:event_combo_box_cycleActionPerformed

    private void button_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addActionPerformed

    }//GEN-LAST:event_button_addActionPerformed

    private final HashMap<Integer, Long> id_cycles, id_classes, id_annees, id_table_cycles;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_add;
    private javax.swing.JButton button_remove;
    private javax.swing.JButton button_update;
    private javax.swing.JComboBox<String> combo_box_annee;
    private javax.swing.JComboBox<String> combo_box_cycle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JMenuItem menu_item_classe_add;
    private javax.swing.JMenuItem menu_item_classe_remove;
    private javax.swing.JMenuItem menu_item_classe_update;
    private javax.swing.JMenuItem menu_item_cycle_add;
    private javax.swing.JMenuItem menu_item_cycle_remove;
    private javax.swing.JMenuItem menu_item_cycle_update;
    private javax.swing.JPopupMenu popup_classe;
    private javax.swing.JPopupMenu popup_cycle;
    private javax.swing.JScrollPane scroll_pane_classe;
    private javax.swing.JScrollPane scroll_pane_cycle;
    private javax.swing.JTable table_classe;
    private javax.swing.JTable table_cycle;
    // End of variables declaration//GEN-END:variables
    private static void addPopup(Component component, final JPopupMenu popup) {
        component.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            private void showMenu(MouseEvent e) {
                popup.show(e.getComponent(), e.getX(), e.getY());
            }
        });
    }

    private void popup() {
        addPopup(scroll_pane_classe, popup_classe);
        addPopup(table_classe, popup_classe);

        addPopup(scroll_pane_cycle, popup_cycle);
        addPopup(table_cycle, popup_cycle);
    }

    private void table_cycle() {
        DefaultTableModel model = (DefaultTableModel) table_cycle.getModel();
        model.setRowCount(0);
        id_table_cycles.clear();
        if (combo_box_annee.getSelectedIndex() < 0) {
            return;
        }
        Long id_annee = id_annees.get(combo_box_annee.getSelectedIndex());
        int total_effectif = 0, total_fille = 0, total_garcon = 0;
        ArrayList<Cycle> list = getController().getCycleController().gets();
        for (int i = 0; i < list.size(); i++) {
            Cycle get = list.get(i);
            int effectif_fille, effectif_garcon, effectif_total;
            effectif_fille = getController().getEleveClasseController().getEffectif(id_annee, get.getId(), null, "F");
            effectif_garcon = getController().getEleveClasseController().getEffectif(id_annee, get.getId(), null, "M");
            effectif_total = getController().getEleveClasseController().getEffectif(id_annee, get.getId(), null, null);
            Object row[] = new Object[6];
            total_effectif += effectif_total;
            total_fille += effectif_fille;
            total_garcon += effectif_garcon;
            row[0] = i + 1;
            row[1] = list.get(i).getCycle();
            row[2] = effectif_total;
            row[3] = effectif_fille;
            row[4] = effectif_garcon;
            id_table_cycles.put(i, list.get(i).getId());
            model.addRow(row);
        }
        Object row[] = new Object[6];
        row[0] = "";
        row[1] = "";
        row[2] = "";
        row[3] = "";
        row[4] = "";
        model.addRow(row);
        row = new Object[6];
        row[0] = "***";
        row[1] = "TOTAL";
        row[2] = total_effectif;
        row[3] = total_fille;
        row[4] = total_garcon;
        model.addRow(row);
        table_cycle.setModel(model);
        table_cycle.setShowVerticalLines(true);
        table_cycle.setShowHorizontalLines(true);
        table_cycle.setRowHeight(30);
        table_cycle.setGridColor(Color.BLACK);
        TableColumn column = table_cycle.getColumnModel().getColumn(table_cycle.getColumnModel().getColumnCount() - 1);
        column.setCellRenderer(new ButtonsRenderer());
        column.setCellEditor(new ButtonsEditor(table_cycle));
    }

    private void table_classe() {
        DefaultTableModel model = (DefaultTableModel) table_classe.getModel();
        model.setRowCount(0);
        id_classes.clear();
        if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0) {
            return;
        }
        Long id_annee = id_annees.get(combo_box_annee.getSelectedIndex());
        Long id_cycle = id_cycles.get(combo_box_cycle.getSelectedIndex());
        ArrayList<bean.Classe> list = getController().getClasseController().gets(id_annee, id_cycle);
        for (int i = 0; i < list.size(); i++) {
            Classe classe = list.get(i);
            Object row[] = new Object[7];
            row[0] = i + 1;
            row[1] = classe.getClasse();
            row[2] = getController().getCycleController().get(classe.getId_cycle()).getCycle();
            row[3] = getController().getEleveClasseController().getEffectif(id_annee, id_cycle, classe.getId(), null);
            row[4] = getController().getEleveClasseController().getEffectif(id_annee, id_cycle, classe.getId(), "F");
            row[5] = getController().getEleveClasseController().getEffectif(id_annee, id_cycle, classe.getId(), "M");
            id_classes.put(i, list.get(i).getId());
            model.addRow(row);
        }
        table_classe.setModel(model);
        table_classe.setShowVerticalLines(true);
        table_classe.setShowHorizontalLines(true);
        table_classe.setRowHeight(30);
        table_classe.setGridColor(Color.BLACK);
        TableColumn column = table_classe.getColumnModel().getColumn(table_classe.getColumnModel().getColumnCount() - 1);
        column.setCellRenderer(new ButtonsRenderer());
        column.setCellEditor(new ButtonsEditor(table_classe));
    }

    private void init_combo_box_annee() {
        combo_box_annee.removeAllItems();
        id_annees.clear();
        try {
            ArrayList<Annee> list = getController().getAnneeController().gets();
            for (int i = 0; i < list.size(); i++) {
                combo_box_annee.addItem(list.get(i).getAnnee());
                id_annees.put(i, list.get(i).getId());
            }
        } catch (Exception e) {
            combo_box_annee.removeAllItems();
            id_annees.clear();
        }
    }

    private void init_combo_box_cycle() {
        combo_box_cycle.removeAllItems();
        id_cycles.clear();
        try {
            ArrayList<Cycle> list = getController().getCycleController().gets();
            if (list.size() > 1) {
                combo_box_cycle.addItem("Tous");
                id_cycles.put(0, null);
                for (int i = 0; i < list.size(); i++) {
                    Cycle cycle = list.get(i);
                    combo_box_cycle.addItem(cycle.getCycle());
                    id_cycles.put(i + 1, cycle.getId());
                }
            } else {
                for (int i = 0; i < list.size(); i++) {
                    Cycle cycle = list.get(i);
                    combo_box_cycle.addItem(cycle.getCycle());
                    id_cycles.put(i, cycle.getId());
                }
            }
        } catch (Exception e) {
            combo_box_cycle.removeAllItems();
            id_cycles.clear();
        }

    }

    private void add_cycle() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        CycleDialog cycleDialog = new CycleDialog(null, true);
        cycleDialog.setVisible(true);
        init_combo_box_cycle();
        table_cycle();
    }

    private void update_cycle() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_cycle.getSelectedRow();
        if (row < 0) {
            return;
        }
        try {
            Cycle cycle = getController().getCycleController().get(id_table_cycles.get(row));
            CycleDialog cycleDialog = new CycleDialog(null, true, cycle);
            cycleDialog.setVisible(true);
            init_combo_box_cycle();
            table_cycle();
            table_classe();
        } catch (NullPointerException e) {
        }

    }

    private void remove_cycle() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_cycle.getSelectedRow();
        if (row < 0) {
            return;
        }
        Cycle cycle = getController().getCycleController().get(id_table_cycles.get(row));
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer le cycle " + cycle.getCycle() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
        if (choice == 0) {
            getController().getCycleController().remove(cycle.getId());
            init_combo_box_cycle();
            table_cycle();
            table_classe();
        }

    }

    private void add_classe() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        ClasseDialog classeDialog = new ClasseDialog(null, true);
        classeDialog.setVisible(true);
        table_cycle();
        table_classe();
    }

    private void update_classe() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_classe.getSelectedRow();
        if (row < 0) {
            return;
        }
        bean.Classe classe = getController().getClasseController().get(id_classes.get(row));
        ClasseDialog classeDialog = new ClasseDialog(null, true, classe);
        classeDialog.setVisible(true);
        table_cycle();
        table_classe();
    }

    private void remove_classe() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_classe.getSelectedRow();
        if (row < 0) {
            return;
        }
        bean.Classe classe = getController().getClasseController().get(id_classes.get(row));
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer la classe " + classe.getClasse() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
        if (choice == 0) {
            getController().getClasseController().remove(classe.getId());
            table_cycle();
            table_classe();
        }
    }

    enum Actions {
        MODIFIER, SUPRIMER;
    }

    class ButtonsPanel extends JPanel {

        public final List<JButton> buttons = new ArrayList<>();

        public ButtonsPanel() {
            super(new FlowLayout(FlowLayout.LEFT));
            setOpaque(true);
            for (Actions a : Actions.values()) {
                JButton b = new JButton(a.toString());
                b.setFocusable(false);
                b.setRolloverEnabled(false);
                if ("MODIFIER".equals(a.toString())) {
                    b.setBackground(Color.green);
                    b.setForeground(Color.white);
                }
                if ("SUPRIMER".equals(a.toString())) {
                    b.setBackground(Color.red);
                    b.setForeground(Color.white);
                }
                add(b);
                buttons.add(b);
            }
        }

        protected void updateButtons(Object value) {
            if (value instanceof EnumSet ea) {
                removeAll();
                if (ea.contains(Actions.MODIFIER)) {
                    add(buttons.get(0));
                }
                if (ea.contains(Actions.SUPRIMER)) {
                    add(buttons.get(1));
                }
            }
        }
    }

    class ButtonsRenderer implements TableCellRenderer {

        private final ButtonsPanel panel = new ButtonsPanel();

        @Override
        public Component getTableCellRendererComponent(
                JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            panel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
            panel.updateButtons(value);
            return panel;
        }
    }

    class ModifierAction extends AbstractAction {

        private final JTable table;

        public ModifierAction(JTable table) {
            super(Actions.MODIFIER.toString());
            this.table = table;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (table.getColumnModel().getColumnCount() == 6) {
                update_cycle();
            } else {
                update_classe();
            }

        }
    }

    class SuprimerAction extends AbstractAction {

        private final JTable table;

        public SuprimerAction(JTable table) {
            super(Actions.SUPRIMER.toString());
            this.table = table;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (table.getColumnModel().getColumnCount() == 6) {
                remove_cycle();
            } else {
                remove_classe();
            }
        }
    }

    class ButtonsEditor extends AbstractCellEditor implements TableCellEditor {

        private final ButtonsPanel panel = new ButtonsPanel();
        private final JTable table;
        private Object o;

        private class EditingStopHandler extends MouseAdapter implements ActionListener {

            @Override
            public void mousePressed(MouseEvent e) {
                Object o = e.getSource();
                if (o instanceof TableCellEditor) {
                    actionPerformed(null);
                } else if (o instanceof JButton) {
                    ButtonModel m = ((JButton) e.getComponent()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        panel.setBackground(table.getBackground());
                    }
                }
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                EventQueue.invokeLater(() -> {
                    fireEditingStopped();
                });
            }
        }

        public ButtonsEditor(JTable table) {
            super();
            this.table = table;
            panel.buttons.get(0).setAction(new ModifierAction(table));
            panel.buttons.get(1).setAction(new SuprimerAction(table));

            EditingStopHandler handler = new EditingStopHandler();
            for (JButton b : panel.buttons) {
                b.addMouseListener(handler);
                b.addActionListener(handler);
            }
            panel.addMouseListener(handler);
        }

        @Override
        public Component getTableCellEditorComponent(
                JTable table, Object value, boolean isSelected, int row, int column) {
            panel.setBackground(table.getSelectionBackground());
            panel.updateButtons(value);
            o = value;
            return panel;
        }

        @Override
        public Object getCellEditorValue() {
            return o;
        }
    }
}
