/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.panel;

import bean.Annee;
import bean.Classe;
import bean.Cycle;
import bean.Eleve;
import bean.EleveClasse;
import bean.Nationalite;
import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.AbstractCellEditor;
import javax.swing.ButtonModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import static main.Main.getConnection;
import static main.Main.getController;
import static main.Main.getDroit;
import static main.Main.isCan_remove;
import static main.Main.setCan_remove;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import view.dialog.EleveClasseDialog;
import view.dialog.SupressionDialog;

/**
 *
 * @author ATH
 */
public class ElevePanel extends javax.swing.JPanel {

    /**
     * Creates new form Eleve
     */
    public ElevePanel() {
        id_eleve_classes = new HashMap<>();
        id_annees = new HashMap<>();
        id_cycles = new HashMap<>();
        id_classes = new HashMap<>();
        id_nationalites = new HashMap<>();
        initComponents();
        init_combo_box_annee();
        init_combo_box_cycle();
        init_combo_box_classe();
        init_combo_box_nationalite();
        table_eleve();
        popup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup_menu = new javax.swing.JPopupMenu();
        menu_item_add = new javax.swing.JMenuItem();
        menu_item_update = new javax.swing.JMenuItem();
        menu_item_remove = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menu_item_passer = new javax.swing.JMenuItem();
        menu_item_retirer = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        combo_box_annee = new javax.swing.JComboBox<>();
        combo_box_cycle = new javax.swing.JComboBox<>();
        combo_box_classe = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        combo_box_nationalite = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        combo_box_sexe = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        text_field_rechercher = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        button_nouveau = new javax.swing.JButton();
        button_imprimer_liste_classe = new javax.swing.JButton();
        btn_actualiser_table = new javax.swing.JButton();
        scroll_pane_eleve = new javax.swing.JScrollPane();
        table_eleve = new javax.swing.JTable();

        menu_item_add.setText("Ajouter élève");
        menu_item_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_addActionPerformed(evt);
            }
        });
        popup_menu.add(menu_item_add);

        menu_item_update.setText("Mettre à jour les informations");
        menu_item_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_updateActionPerformed(evt);
            }
        });
        popup_menu.add(menu_item_update);

        menu_item_remove.setText("Suprimer");
        menu_item_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_removeActionPerformed(evt);
            }
        });
        popup_menu.add(menu_item_remove);
        popup_menu.add(jSeparator1);

        menu_item_passer.setText("Passer en classe supérieure");
        menu_item_passer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_passerActionPerformed(evt);
            }
        });
        popup_menu.add(menu_item_passer);

        menu_item_retirer.setText("Retirer la sélection de cette classe");
        menu_item_retirer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_retirerActionPerformed(evt);
            }
        });
        popup_menu.add(menu_item_retirer);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Année :");

        jLabel6.setText("Cycle :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Classe :");

        combo_box_annee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_annee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_anneeActionPerformed(evt);
            }
        });

        combo_box_cycle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_cycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_cycleActionPerformed(evt);
            }
        });

        combo_box_classe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_classe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_classeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Nationalité :");

        combo_box_nationalite.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_nationalite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_nationaliteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Sexe :");

        combo_box_sexe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tous", "M", "F" }));
        combo_box_sexe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_sexeActionPerformed(evt);
            }
        });

        jLabel4.setText("Rechercher :");

        text_field_rechercher.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                text_field_rechercherKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_box_annee, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combo_box_cycle, 0, 200, Short.MAX_VALUE)
                            .addComponent(combo_box_classe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(text_field_rechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_box_nationalite, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_box_sexe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(combo_box_annee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(combo_box_sexe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(combo_box_cycle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(combo_box_nationalite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(combo_box_classe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(text_field_rechercher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        button_nouveau.setBackground(new java.awt.Color(0, 51, 255));
        button_nouveau.setForeground(new java.awt.Color(255, 255, 255));
        button_nouveau.setText("Nouveau");
        button_nouveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_nouveauActionPerformed(evt);
            }
        });

        button_imprimer_liste_classe.setText("Imprimer");
        button_imprimer_liste_classe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_imprimer_liste_classeActionPerformed(evt);
            }
        });

        btn_actualiser_table.setForeground(new java.awt.Color(0, 153, 0));
        btn_actualiser_table.setText("Actualiser la table");
        btn_actualiser_table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_actualiser_tableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_nouveau)
                .addGap(18, 18, 18)
                .addComponent(button_imprimer_liste_classe)
                .addGap(18, 18, 18)
                .addComponent(btn_actualiser_table, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_nouveau)
                    .addComponent(button_imprimer_liste_classe)
                    .addComponent(btn_actualiser_table))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        table_eleve.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "N°", "Classe", "Matricule", "Nom et prénom", "Sexe", "Date de naissance", "Lieu de naissance", "Nationalité", "N° parent/tuteur", "Option"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll_pane_eleve.setViewportView(table_eleve);
        if (table_eleve.getColumnModel().getColumnCount() > 0) {
            table_eleve.getColumnModel().getColumn(0).setMinWidth(35);
            table_eleve.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_eleve.getColumnModel().getColumn(0).setMaxWidth(35);
            table_eleve.getColumnModel().getColumn(1).setPreferredWidth(100);
            table_eleve.getColumnModel().getColumn(1).setMaxWidth(100);
            table_eleve.getColumnModel().getColumn(2).setPreferredWidth(100);
            table_eleve.getColumnModel().getColumn(2).setMaxWidth(100);
            table_eleve.getColumnModel().getColumn(3).setPreferredWidth(300);
            table_eleve.getColumnModel().getColumn(4).setPreferredWidth(50);
            table_eleve.getColumnModel().getColumn(4).setMaxWidth(50);
            table_eleve.getColumnModel().getColumn(5).setPreferredWidth(100);
            table_eleve.getColumnModel().getColumn(5).setMaxWidth(100);
            table_eleve.getColumnModel().getColumn(6).setPreferredWidth(100);
            table_eleve.getColumnModel().getColumn(6).setMaxWidth(100);
            table_eleve.getColumnModel().getColumn(7).setPreferredWidth(100);
            table_eleve.getColumnModel().getColumn(7).setMaxWidth(100);
            table_eleve.getColumnModel().getColumn(8).setPreferredWidth(150);
            table_eleve.getColumnModel().getColumn(8).setMaxWidth(150);
            table_eleve.getColumnModel().getColumn(9).setMinWidth(185);
            table_eleve.getColumnModel().getColumn(9).setPreferredWidth(185);
            table_eleve.getColumnModel().getColumn(9).setMaxWidth(185);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll_pane_eleve)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scroll_pane_eleve, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void combo_box_sexeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_sexeActionPerformed
        table_eleve();
    }//GEN-LAST:event_combo_box_sexeActionPerformed

    private void combo_box_anneeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_anneeActionPerformed
        init_combo_box_classe();
        table_eleve();
    }//GEN-LAST:event_combo_box_anneeActionPerformed

    private void combo_box_cycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_cycleActionPerformed
        init_combo_box_classe();
        table_eleve();
    }//GEN-LAST:event_combo_box_cycleActionPerformed

    private void combo_box_classeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_classeActionPerformed
        table_eleve();
    }//GEN-LAST:event_combo_box_classeActionPerformed

    private void combo_box_nationaliteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_nationaliteActionPerformed
        //table_eleve();
    }//GEN-LAST:event_combo_box_nationaliteActionPerformed

    private void button_nouveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_nouveauActionPerformed
        add();
    }//GEN-LAST:event_button_nouveauActionPerformed

    private void text_field_rechercherKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_text_field_rechercherKeyReleased
        table_eleve();
    }//GEN-LAST:event_text_field_rechercherKeyReleased

    private void menu_item_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_addActionPerformed
        add();
    }//GEN-LAST:event_menu_item_addActionPerformed

    private void menu_item_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_updateActionPerformed
        update();
    }//GEN-LAST:event_menu_item_updateActionPerformed

    private void menu_item_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_removeActionPerformed
        remove_eleve_classe();
    }//GEN-LAST:event_menu_item_removeActionPerformed

    private void button_imprimer_liste_classeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_imprimer_liste_classeActionPerformed
        impression_liste_classe();
    }//GEN-LAST:event_button_imprimer_liste_classeActionPerformed

    private void btn_actualiser_tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_actualiser_tableActionPerformed
        table_eleve();
    }//GEN-LAST:event_btn_actualiser_tableActionPerformed

    private void menu_item_passerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_passerActionPerformed
        passer_classe_superieur();
    }//GEN-LAST:event_menu_item_passerActionPerformed

    private void menu_item_retirerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_retirerActionPerformed
        remove_eleve_classe();
    }//GEN-LAST:event_menu_item_retirerActionPerformed

    private final HashMap<Integer, Long> id_eleve_classes, id_annees, id_cycles, id_classes, id_nationalites;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_actualiser_table;
    private javax.swing.JButton button_imprimer_liste_classe;
    private javax.swing.JButton button_nouveau;
    private javax.swing.JComboBox<String> combo_box_annee;
    private javax.swing.JComboBox<String> combo_box_classe;
    private javax.swing.JComboBox<String> combo_box_cycle;
    private javax.swing.JComboBox<String> combo_box_nationalite;
    private javax.swing.JComboBox<String> combo_box_sexe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem menu_item_add;
    private javax.swing.JMenuItem menu_item_passer;
    private javax.swing.JMenuItem menu_item_remove;
    private javax.swing.JMenuItem menu_item_retirer;
    private javax.swing.JMenuItem menu_item_update;
    private javax.swing.JPopupMenu popup_menu;
    private javax.swing.JScrollPane scroll_pane_eleve;
    private javax.swing.JTable table_eleve;
    private javax.swing.JTextField text_field_rechercher;
    // End of variables declaration//GEN-END:variables

    private static void addPopup(Component component, final JPopupMenu popup) {
        component.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            private void showMenu(MouseEvent e) {
                popup.show(e.getComponent(), e.getX(), e.getY());
            }
        });
    }

    private void popup() {
        addPopup(scroll_pane_eleve, popup_menu);
        addPopup(table_eleve, popup_menu);
    }

    private void table_eleve() {
        DefaultTableModel model = (DefaultTableModel) table_eleve.getModel();
        model.setRowCount(0);
        id_eleve_classes.clear();
        try {
            if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0 || combo_box_classe.getSelectedIndex() < 0 || combo_box_sexe.getSelectedIndex() < 0) {
                return;
            }
            Long id_annee = id_annees.get(combo_box_annee.getSelectedIndex());
            Long id_cycle = id_cycles.get(combo_box_cycle.getSelectedIndex());
            Long id_classe = id_classes.get(combo_box_classe.getSelectedIndex());
            Long id_nationalite = id_nationalites.get(combo_box_nationalite.getSelectedIndex());
            String rechercher = null, sexe = combo_box_sexe.getSelectedItem().toString();
            if (!text_field_rechercher.getText().isBlank()) {
                rechercher = text_field_rechercher.getText();
            }
            ArrayList<bean.EleveClasse> list = getController().getEleveClasseController().gets(null, id_annee, id_cycle, id_classe, rechercher, id_nationalite, sexe);
            for (int i = 0; i < list.size(); i++) {
                Object row[] = new Object[10];
                EleveClasse eleveClasse = list.get(i);
                Eleve eleve = getController().getEleveController().get(eleveClasse.getId_eleve());
                Classe classe = getController().getClasseController().get(eleveClasse.getId_classe());
                Nationalite nationalite = getController().getNationaliteController().get(eleve.getId_nationalite());
                row[0] = i + 1;
                row[1] = classe.getClasse();
                row[2] = eleve.getMatricule();
                row[3] = eleve.getNom_prenom();
                row[4] = eleve.getSexe();
                row[5] = eleve.getDate_de_naissance();
                row[6] = eleve.getLieu_de_naissance();
                row[7] = nationalite.getNationalite();
                row[8] = eleve.getContact();
                row[9] = EnumSet.allOf(Actions.class);
                id_eleve_classes.put(i, eleveClasse.getId());
                model.addRow(row);
            }
            table_eleve.setModel(model);
            table_eleve.setShowVerticalLines(true);
            table_eleve.setShowHorizontalLines(true);
            table_eleve.setRowHeight(30);
            table_eleve.setGridColor(Color.BLACK);
            TableColumn column = table_eleve.getColumnModel().getColumn(table_eleve.getColumnModel().getColumnCount() - 1);
            column.setCellRenderer(new ButtonsRenderer());
            column.setCellEditor(new ButtonsEditor(table_eleve));
        } catch (NullPointerException e) {
            model.setRowCount(0);
            id_eleve_classes.clear();
        }
    }

    private void init_combo_box_annee() {
        combo_box_annee.removeAllItems();
        id_annees.clear();
        try {
            ArrayList<Annee> list = getController().getAnneeController().gets();
            for (int i = 0; i < list.size(); i++) {
                Annee annee = list.get(i);
                combo_box_annee.addItem(annee.getAnnee());
                id_annees.put(i, annee.getId());
            }
        } catch (Exception e) {
            combo_box_annee.removeAllItems();
            id_annees.clear();
        }
    }

    private void init_combo_box_cycle() {
        combo_box_cycle.removeAllItems();
        id_cycles.clear();
        try {
            ArrayList<Cycle> list = getController().getCycleController().gets();
            for (int i = 0; i < list.size(); i++) {
                Cycle cycle = list.get(i);
                combo_box_cycle.addItem(cycle.getCycle());
                id_cycles.put(i, cycle.getId());
            }
        } catch (Exception e) {
            combo_box_cycle.removeAllItems();
            id_cycles.clear();
        }
    }

    private void init_combo_box_nationalite() {
        combo_box_nationalite.removeAllItems();
        id_nationalites.clear();
        try {
            ArrayList<Nationalite> list = getController().getNationaliteController().gets();
            for (int i = 0; i < list.size(); i++) {
                Nationalite nationalite = list.get(i);
                combo_box_nationalite.addItem(nationalite.getNationalite());
                id_nationalites.put(i, nationalite.getId());
            }
        } catch (Exception e) {
            combo_box_nationalite.removeAllItems();
            id_nationalites.clear();
        }

    }

    private void init_combo_box_classe() {
        combo_box_classe.removeAllItems();
        id_classes.clear();
        try {
            if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0) {
                return;
            }
            Long id_annee = id_annees.get(combo_box_annee.getSelectedIndex());
            Long id_cycle = id_cycles.get(combo_box_cycle.getSelectedIndex());
            ArrayList<Classe> list = getController().getClasseController().gets(id_annee, id_cycle);
            for (int i = 0; i < list.size(); i++) {
                Classe classe = list.get(i);
                combo_box_classe.addItem(classe.getClasse());
                id_classes.put(i, classe.getId());
            }
        } catch (Exception e) {
            combo_box_classe.removeAllItems();
            id_classes.clear();
        }
    }

    private void add() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        view.dialog.EleveDialog eleveDialog = new view.dialog.EleveDialog(null, true);
        eleveDialog.setVisible(true);
        table_eleve();
    }

    private void update() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_eleve.getSelectedRow();
        if (row < 0) {
            return;
        }
        EleveClasse eleveClasse = getController().getEleveClasseController().get(id_eleve_classes.get(row));
        view.dialog.EleveDialog eleveDialog = new view.dialog.EleveDialog(null, true, eleveClasse);
        eleveDialog.setVisible(true);
        table_eleve();
    }

    private void remove_eleve_classe() {
        setCan_remove(false);
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row_count = table_eleve.getSelectedRowCount();
        if (row_count == 0 || combo_box_classe.getSelectedIndex() < 0) {
            return;
        }
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir retirer le ou les élèves sélectionnés dans cette classe ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
        if (choice == 0) {
            SupressionDialog supressionDialog = new SupressionDialog(null, true);
            supressionDialog.setVisible(true);
            if (isCan_remove()) {
                for (int i = 0; i < table_eleve.getSelectedRows().length; i++) {
                    int selectedRow = table_eleve.getSelectedRows()[i];
                    EleveClasse eleveClasse = getController().getEleveClasseController().get(id_eleve_classes.get(selectedRow));
                    ArrayList<EleveClasse> list = getController().getEleveClasseController().gets(eleveClasse.getId_eleve(), null, null, null, null, null, null);
                    getController().getEleveClasseController().remove(eleveClasse.getId());
                    if (list.size() <= 1) {
                        getController().getEleveController().remove(eleveClasse.getId_eleve());
                    }
                }
                table_eleve();
                JOptionPane.showMessageDialog(this, "Opération éffectuée avec succes ", "Suppression", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        setCan_remove(false);
    }

    private void impression_liste_classe() {
        if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0 || combo_box_classe.getSelectedIndex() < 0) {
            return;
        }
        Long id_classe = id_classes.get(combo_box_classe.getSelectedIndex());

        try {
            HashMap<String, Object> m = new HashMap<>();
            String reports = System.getProperty("user.dir") + "\\ressources\\report\\List_classe.jasper";
            m.put("id_classe", id_classe);
            JasperPrint jasperPrint = JasperFillManager.fillReport(reports, m, getConnection());
            JasperViewer.viewReport(jasperPrint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, " Echec d'impression\n" + ex.getMessage());
        }
    }

    private void passer_classe_superieur() {
        if (!getDroit().isModifier()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_eleve.getSelectedRow();
        if (row < 0) {
            EleveClasseDialog eleveClasseDialog = new EleveClasseDialog(null, true);
            eleveClasseDialog.setVisible(true);
        } else {
            ArrayList<Long> selected_id_eleve = new ArrayList<>();
            for (int i = 0; i < table_eleve.getSelectedRows().length; i++) {
                int selectedRow = table_eleve.getSelectedRows()[i];
                EleveClasse eleveClasse = getController().getEleveClasseController().get(id_eleve_classes.get(selectedRow));
                selected_id_eleve.add(eleveClasse.getId_eleve());
            }
            EleveClasseDialog eleveClasseDialog = new EleveClasseDialog(null, true, selected_id_eleve);
            eleveClasseDialog.setVisible(true);
        }
        table_eleve();
    }

    enum Actions {
        MODIFIER, SUPRIMER;
    }

    class ButtonsPanel extends JPanel {

        public final List<JButton> buttons = new ArrayList<>();

        public ButtonsPanel() {
            super(new FlowLayout(FlowLayout.LEFT));
            setOpaque(true);
            for (Actions a : Actions.values()) {
                JButton b = new JButton(a.toString());
                b.setFocusable(false);
                b.setRolloverEnabled(false);
                if ("MODIFIER".equals(a.toString())) {
                    b.setBackground(Color.green);
                    b.setForeground(Color.white);
                }
                if ("SUPRIMER".equals(a.toString())) {
                    b.setBackground(Color.red);
                    b.setForeground(Color.white);
                }
                add(b);
                buttons.add(b);
            }
        }

        protected void updateButtons(Object value) {
            if (value instanceof EnumSet ea) {
                removeAll();
                if (ea.contains(Actions.MODIFIER)) {
                    add(buttons.get(0));
                }
                if (ea.contains(Actions.SUPRIMER)) {
                    add(buttons.get(1));
                }
            }
        }
    }

    class ButtonsRenderer implements TableCellRenderer {

        private final ButtonsPanel panel = new ButtonsPanel();

        @Override
        public Component getTableCellRendererComponent(
                JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            panel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
            panel.updateButtons(value);
            return panel;
        }
    }

    class ModifierAction extends AbstractAction {

        public ModifierAction() {
            super(Actions.MODIFIER.toString());
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            update();
        }
    }

    class SuprimerAction extends AbstractAction {

        public SuprimerAction() {
            super(Actions.SUPRIMER.toString());
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            remove_eleve_classe();
        }
    }

    class ButtonsEditor extends AbstractCellEditor implements TableCellEditor {

        private final ButtonsPanel panel = new ButtonsPanel();
        private final JTable table;
        private Object o;

        private class EditingStopHandler extends MouseAdapter implements ActionListener {

            @Override
            public void mousePressed(MouseEvent e) {
                Object o = e.getSource();
                if (o instanceof TableCellEditor) {
                    actionPerformed(null);
                } else if (o instanceof JButton) {
                    ButtonModel m = ((JButton) e.getComponent()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        panel.setBackground(table.getBackground());
                    }
                }
            }

            @Override
            public void actionPerformed(ActionEvent e) {
                EventQueue.invokeLater(() -> {
                    fireEditingStopped();
                });
            }
        }

        public ButtonsEditor(JTable table) {
            super();
            this.table = table;
            panel.buttons.get(0).setAction(new ModifierAction());
            panel.buttons.get(1).setAction(new SuprimerAction());

            EditingStopHandler handler = new EditingStopHandler();
            for (JButton b : panel.buttons) {
                b.addMouseListener(handler);
                b.addActionListener(handler);
            }
            panel.addMouseListener(handler);
        }

        @Override
        public Component getTableCellEditorComponent(
                JTable table, Object value, boolean isSelected, int row, int column) {
            panel.setBackground(table.getSelectionBackground());
            panel.updateButtons(value);
            o = value;
            return panel;
        }

        @Override
        public Object getCellEditorValue() {
            return o;
        }
    }
}
