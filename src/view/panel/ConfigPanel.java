/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.panel;

import bean.Annee;
import bean.Nationalite;
import bean.Semestre;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import main.Main;
import static main.Main.getController;
import static main.Main.getDroit;
import view.dialog.AnneeDialog;
import view.dialog.NationaliteDialog;
import view.dialog.SemestreDialog;
import view.dialog.SupressionDialog;

/**
 *
 * @author ATH
 */
public class ConfigPanel extends javax.swing.JPanel {

    /**
     * Creates new form Config
     */
    public ConfigPanel() {
        id_annees = new HashMap<>();
        id_nationalites = new HashMap<>();
        id_semestres = new HashMap<>();
        initComponents();
        table_annee();
        table_nationalite();
        table_semestre();
        popup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup_annee = new javax.swing.JPopupMenu();
        menu_item_annee_add = new javax.swing.JMenuItem();
        menu_item_annee_update = new javax.swing.JMenuItem();
        menu_item_annee_remove = new javax.swing.JMenuItem();
        popup_nationalite = new javax.swing.JPopupMenu();
        menu_item_nationalite_add = new javax.swing.JMenuItem();
        menu_item_nationalite_update = new javax.swing.JMenuItem();
        menu_item_nationalite_remove = new javax.swing.JMenuItem();
        popup_semestre = new javax.swing.JPopupMenu();
        menu_item_semestre_add = new javax.swing.JMenuItem();
        menu_item_semestre_update = new javax.swing.JMenuItem();
        menu_item_semestre_remove = new javax.swing.JMenuItem();
        tabbed_pane = new javax.swing.JTabbedPane();
        panel_annee = new javax.swing.JPanel();
        scroll_pane_table_annee = new javax.swing.JScrollPane();
        table_annee = new javax.swing.JTable();
        panel_nationalite = new javax.swing.JPanel();
        scroll_pane_table_nationalite = new javax.swing.JScrollPane();
        table_nationalite = new javax.swing.JTable();
        panel_permission = new javax.swing.JPanel();
        scroll_pane_table_semestre = new javax.swing.JScrollPane();
        table_semestre = new javax.swing.JTable();

        menu_item_annee_add.setText("Ajouter");
        menu_item_annee_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_annee_addActionPerformed(evt);
            }
        });
        popup_annee.add(menu_item_annee_add);

        menu_item_annee_update.setText("Mettre à jour");
        menu_item_annee_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_annee_updateActionPerformed(evt);
            }
        });
        popup_annee.add(menu_item_annee_update);

        menu_item_annee_remove.setText("Suprimer");
        menu_item_annee_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_annee_removeActionPerformed(evt);
            }
        });
        popup_annee.add(menu_item_annee_remove);

        menu_item_nationalite_add.setText("Ajouter");
        menu_item_nationalite_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_nationalite_addActionPerformed(evt);
            }
        });
        popup_nationalite.add(menu_item_nationalite_add);

        menu_item_nationalite_update.setText("Mettre à jour");
        menu_item_nationalite_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_nationalite_updateActionPerformed(evt);
            }
        });
        popup_nationalite.add(menu_item_nationalite_update);

        menu_item_nationalite_remove.setText("Suprimer");
        menu_item_nationalite_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_nationalite_removeActionPerformed(evt);
            }
        });
        popup_nationalite.add(menu_item_nationalite_remove);

        menu_item_semestre_add.setText("Ajouter");
        menu_item_semestre_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_semestre_addActionPerformed(evt);
            }
        });
        popup_semestre.add(menu_item_semestre_add);

        menu_item_semestre_update.setText("Mettre à jour");
        menu_item_semestre_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_semestre_updateActionPerformed(evt);
            }
        });
        popup_semestre.add(menu_item_semestre_update);

        menu_item_semestre_remove.setText("Suprimer");
        menu_item_semestre_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_semestre_removeActionPerformed(evt);
            }
        });
        popup_semestre.add(menu_item_semestre_remove);

        tabbed_pane.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        scroll_pane_table_annee.setBorder(javax.swing.BorderFactory.createTitledBorder("Liste des années scolaires"));

        table_annee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "N°", "Année scolaire", "En cours"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll_pane_table_annee.setViewportView(table_annee);
        if (table_annee.getColumnModel().getColumnCount() > 0) {
            table_annee.getColumnModel().getColumn(0).setMinWidth(35);
            table_annee.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_annee.getColumnModel().getColumn(0).setMaxWidth(35);
            table_annee.getColumnModel().getColumn(2).setMaxWidth(60);
        }

        javax.swing.GroupLayout panel_anneeLayout = new javax.swing.GroupLayout(panel_annee);
        panel_annee.setLayout(panel_anneeLayout);
        panel_anneeLayout.setHorizontalGroup(
            panel_anneeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_anneeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll_pane_table_annee, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(605, Short.MAX_VALUE))
        );
        panel_anneeLayout.setVerticalGroup(
            panel_anneeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_anneeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll_pane_table_annee, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(338, Short.MAX_VALUE))
        );

        tabbed_pane.addTab("Année scolaire", panel_annee);

        scroll_pane_table_nationalite.setBorder(javax.swing.BorderFactory.createTitledBorder("Liste des nationalités"));

        table_nationalite.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "N°", "Nationalité"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll_pane_table_nationalite.setViewportView(table_nationalite);
        if (table_nationalite.getColumnModel().getColumnCount() > 0) {
            table_nationalite.getColumnModel().getColumn(0).setMinWidth(35);
            table_nationalite.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_nationalite.getColumnModel().getColumn(0).setMaxWidth(35);
        }

        javax.swing.GroupLayout panel_nationaliteLayout = new javax.swing.GroupLayout(panel_nationalite);
        panel_nationalite.setLayout(panel_nationaliteLayout);
        panel_nationaliteLayout.setHorizontalGroup(
            panel_nationaliteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_nationaliteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll_pane_table_nationalite, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(605, Short.MAX_VALUE))
        );
        panel_nationaliteLayout.setVerticalGroup(
            panel_nationaliteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_nationaliteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll_pane_table_nationalite, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(338, Short.MAX_VALUE))
        );

        tabbed_pane.addTab("Nationalité", panel_nationalite);

        scroll_pane_table_semestre.setBorder(javax.swing.BorderFactory.createTitledBorder("Liste des années scolaires"));

        table_semestre.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "N°", "Semestre", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll_pane_table_semestre.setViewportView(table_semestre);
        if (table_semestre.getColumnModel().getColumnCount() > 0) {
            table_semestre.getColumnModel().getColumn(0).setMinWidth(35);
            table_semestre.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_semestre.getColumnModel().getColumn(0).setMaxWidth(35);
            table_semestre.getColumnModel().getColumn(1).setMinWidth(50);
            table_semestre.getColumnModel().getColumn(1).setPreferredWidth(60);
            table_semestre.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        javax.swing.GroupLayout panel_permissionLayout = new javax.swing.GroupLayout(panel_permission);
        panel_permission.setLayout(panel_permissionLayout);
        panel_permissionLayout.setHorizontalGroup(
            panel_permissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_permissionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll_pane_table_semestre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(399, Short.MAX_VALUE))
        );
        panel_permissionLayout.setVerticalGroup(
            panel_permissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_permissionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll_pane_table_semestre, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(343, Short.MAX_VALUE))
        );

        tabbed_pane.addTab("Semestre", panel_permission);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbed_pane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbed_pane)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void menu_item_annee_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_annee_addActionPerformed
        add_annee();
    }//GEN-LAST:event_menu_item_annee_addActionPerformed

    private void menu_item_annee_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_annee_updateActionPerformed
        update_annee();
    }//GEN-LAST:event_menu_item_annee_updateActionPerformed

    private void menu_item_annee_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_annee_removeActionPerformed
        remove_annee();
    }//GEN-LAST:event_menu_item_annee_removeActionPerformed

    private void menu_item_nationalite_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_nationalite_addActionPerformed
        add_nationalite();
    }//GEN-LAST:event_menu_item_nationalite_addActionPerformed

    private void menu_item_nationalite_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_nationalite_updateActionPerformed
        update_nationalite();
    }//GEN-LAST:event_menu_item_nationalite_updateActionPerformed

    private void menu_item_nationalite_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_nationalite_removeActionPerformed
        remove_nationalite();
    }//GEN-LAST:event_menu_item_nationalite_removeActionPerformed

    private void menu_item_semestre_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_semestre_addActionPerformed
        add_semestre();
    }//GEN-LAST:event_menu_item_semestre_addActionPerformed

    private void menu_item_semestre_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_semestre_updateActionPerformed
        update_semestre();
    }//GEN-LAST:event_menu_item_semestre_updateActionPerformed

    private void menu_item_semestre_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_semestre_removeActionPerformed
        remove_semestre();
    }//GEN-LAST:event_menu_item_semestre_removeActionPerformed

    private final HashMap<Integer, Long> id_annees, id_nationalites, id_semestres;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem menu_item_annee_add;
    private javax.swing.JMenuItem menu_item_annee_remove;
    private javax.swing.JMenuItem menu_item_annee_update;
    private javax.swing.JMenuItem menu_item_nationalite_add;
    private javax.swing.JMenuItem menu_item_nationalite_remove;
    private javax.swing.JMenuItem menu_item_nationalite_update;
    private javax.swing.JMenuItem menu_item_semestre_add;
    private javax.swing.JMenuItem menu_item_semestre_remove;
    private javax.swing.JMenuItem menu_item_semestre_update;
    private javax.swing.JPanel panel_annee;
    private javax.swing.JPanel panel_nationalite;
    private javax.swing.JPanel panel_permission;
    private javax.swing.JPopupMenu popup_annee;
    private javax.swing.JPopupMenu popup_nationalite;
    private javax.swing.JPopupMenu popup_semestre;
    private javax.swing.JScrollPane scroll_pane_table_annee;
    private javax.swing.JScrollPane scroll_pane_table_nationalite;
    private javax.swing.JScrollPane scroll_pane_table_semestre;
    private javax.swing.JTabbedPane tabbed_pane;
    private javax.swing.JTable table_annee;
    private javax.swing.JTable table_nationalite;
    private javax.swing.JTable table_semestre;
    // End of variables declaration//GEN-END:variables
    private static void addPopup(Component component, final JPopupMenu popup) {
        component.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            private void showMenu(MouseEvent e) {
                popup.show(e.getComponent(), e.getX(), e.getY());
            }
        });
    }

    private void popup() {
        addPopup(scroll_pane_table_annee, popup_annee);
        addPopup(table_annee, popup_annee);

        addPopup(scroll_pane_table_nationalite, popup_nationalite);
        addPopup(table_nationalite, popup_nationalite);
        addPopup(scroll_pane_table_semestre, popup_semestre);
        addPopup(table_semestre, popup_semestre);
    }

    private void table_annee() {
        DefaultTableModel model = (DefaultTableModel) table_annee.getModel();
        model.setRowCount(0);
        id_annees.clear();
        ArrayList<Annee> list = getController().getAnneeController().gets();
        for (int i = 0; i < list.size(); i++) {
            Object row[] = new Object[3];
            row[0] = i + 1;
            row[1] = list.get(i).getAnnee();
            row[2] = "";
            id_annees.put(i, list.get(i).getId());
            model.addRow(row);
        }
        table_annee.setModel(model);
        table_annee.setShowVerticalLines(true);
        table_annee.setShowHorizontalLines(true);
    }

    private void table_nationalite() {
        DefaultTableModel model = (DefaultTableModel) table_nationalite.getModel();
        model.setRowCount(0);
        id_nationalites.clear();
        ArrayList<Nationalite> list = getController().getNationaliteController().gets();
        for (int i = 0; i < list.size(); i++) {
            Object row[] = new Object[3];
            row[0] = i + 1;
            row[1] = list.get(i).getNationalite();
            id_nationalites.put(i, list.get(i).getId());
            model.addRow(row);
        }
        table_nationalite.setModel(model);
        table_nationalite.setShowVerticalLines(true);
        table_nationalite.setShowHorizontalLines(true);

    }

    private void table_semestre() {
        DefaultTableModel model = (DefaultTableModel) table_semestre.getModel();
        model.setRowCount(0);
        id_semestres.clear();
        ArrayList<Semestre> list = getController().getSemestreController().gets();
        for (int i = 0; i < list.size(); i++) {
            Object row[] = new Object[3];
            row[0] = i + 1;
            row[1] = list.get(i).getSemestre();
            row[2] = list.get(i).getDescription();
            id_semestres.put(i, list.get(i).getId());
            model.addRow(row);
        }
        table_semestre.setModel(model);
        table_semestre.setShowVerticalLines(true);
        table_semestre.setShowHorizontalLines(true);

    }

    private void add_annee() {
        if (!getDroit().isAdministration() && !getDroit().isAjouter() && !getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        AnneeDialog anneeDialog = new AnneeDialog(null, true);
        anneeDialog.setVisible(true);
        table_annee();
    }

    private void update_annee() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_annee.getSelectedRow();
        if (row < 0) {
            return;
        }
        Annee annee = getController().getAnneeController().get(id_annees.get(row));
        AnneeDialog anneeDialog = new AnneeDialog(null, true, annee);
        anneeDialog.setVisible(true);
        table_annee();
    }

    private void remove_annee() {
        Main.setCan_remove(false);
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_annee.getSelectedRow();
        if (row < 0) {
            return;
        }
        Annee annee = getController().getAnneeController().get(id_annees.get(row));
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer l'année scolaire " + annee.getAnnee() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
        if (choice == 0) {
            SupressionDialog supressionDialog = new SupressionDialog(null, true);
            supressionDialog.setVisible(true);
            if (Main.isCan_remove()) {
                getController().getAnneeController().remove(annee.getId());
                table_annee();
                JOptionPane.showMessageDialog(this, "Opération éffectuée avec succes ! ", "Suppression", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        Main.setCan_remove(false);
    }

    private void add_nationalite() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        NationaliteDialog nationaliteDialog = new NationaliteDialog(null, true);
        nationaliteDialog.setVisible(true);
        table_nationalite();
    }

    private void update_nationalite() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_nationalite.getSelectedRow();
        if (row < 0) {
            return;
        }
        Nationalite nationalite = getController().getNationaliteController().get(id_nationalites.get(row));
        NationaliteDialog nationaliteDialog = new NationaliteDialog(null, true, nationalite);
        nationaliteDialog.setVisible(true);
        table_nationalite();
    }

    private void remove_nationalite() {
        Main.setCan_remove(false);
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_nationalite.getSelectedRow();
        if (row < 0) {
            return;
        }
        Nationalite nationalite = getController().getNationaliteController().get(id_nationalites.get(row));
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer la nationalité " + nationalite.getNationalite() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
        if (choice == 0) {
            SupressionDialog supressionDialog = new SupressionDialog(null, true);
            supressionDialog.setVisible(true);
            if (Main.isCan_remove()) {
                getController().getNationaliteController().remove(nationalite.getId());
                table_nationalite();
                JOptionPane.showMessageDialog(this, "Opération éffectuée avec succes ! ", "Suppression", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        Main.setCan_remove(false);
    }

    private void add_semestre() {
        if (!getDroit().isAdministration() && !getDroit().isAjouter() && !getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        SemestreDialog semestreDialog = new SemestreDialog(null, true);
        semestreDialog.setVisible(true);
        table_semestre();
    }

    private void update_semestre() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_semestre.getSelectedRow();
        if (row < 0) {
            return;
        }
        Semestre semestre = getController().getSemestreController().get(id_semestres.get(row));
        SemestreDialog semestreDialog = new SemestreDialog(null, true, semestre);
        semestreDialog.setVisible(true);
        table_semestre();
    }

    private void remove_semestre() {
        Main.setCan_remove(false);
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_semestre.getSelectedRow();
        if (row < 0) {
            return;
        }
        Semestre semestre = getController().getSemestreController().get(id_semestres.get(row));
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer le semestre " + semestre.getSemestre() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
        if (choice == 0) {
            SupressionDialog supressionDialog = new SupressionDialog(null, true);
            supressionDialog.setVisible(true);
            if (Main.isCan_remove()) {
                getController().getSemestreController().remove(semestre.getId());
                table_semestre();
                JOptionPane.showMessageDialog(this, "Opération éffectuée avec succes ! ", "Suppression", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        Main.setCan_remove(false);
    }
}
