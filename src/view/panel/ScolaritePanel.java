/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.panel;

import bean.Annee;
import bean.Classe;
import bean.Cycle;
import bean.Eleve;
import bean.EleveClasse;
import bean.MontantClasse;
import bean.Tranche;
import bean.Versement;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import static main.Main.getConnection;
import static main.Main.getController;
import static main.Main.getDroit;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import view.dialog.MontantClasseDialog;
import view.dialog.TrancheDialog;
import view.dialog.VersementDialog;

/**
 *
 * @author Toukou Habi
 */
public class ScolaritePanel extends javax.swing.JPanel {

    /**
     * Creates new form ScolaritePanel
     */
    public ScolaritePanel() {
        id_annees = new HashMap<>();
        id_cycles = new HashMap<>();
        id_classes = new HashMap<>();
        id_tranches = new HashMap<>();
        id_table_tranches = new HashMap<>();
        id_table_montant_classes = new HashMap<>();
        id_table_versements = new HashMap<>();
        id_table_eleve_classes = new HashMap<>();
        initComponents();
        init_combo_box_annee();
        init_combo_box_cycle();
        init_combo_box_classe();
        init_combo_box_tranche();
        table_tranche();
        table_montant_classe();
        table_versement();
        table_eleve();
        popup();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup_tranche = new javax.swing.JPopupMenu();
        menu_item_tranche_add = new javax.swing.JMenuItem();
        menu_item_tranche_update = new javax.swing.JMenuItem();
        menu_item_tranche_remove = new javax.swing.JMenuItem();
        popup_montant_classe = new javax.swing.JPopupMenu();
        menu_item_montant_classe_add = new javax.swing.JMenuItem();
        menu_item_montant_classe_update = new javax.swing.JMenuItem();
        menu_item_montant_classe_remove = new javax.swing.JMenuItem();
        popup_nouveau_versement = new javax.swing.JPopupMenu();
        menu_item_nouveau_versement_add = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        combo_box_annee = new javax.swing.JComboBox<>();
        combo_box_cycle = new javax.swing.JComboBox<>();
        combo_box_classe = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        combo_box_tranche = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        combo_box_sexe = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        text_field_rechercher = new javax.swing.JTextField();
        toggle_button = new javax.swing.JToggleButton();
        tabbedPane = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        scroll_pane_eleve = new javax.swing.JScrollPane();
        table_nouveau_versement = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        scrollPane_tranche = new javax.swing.JScrollPane();
        table_tranche = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        scrollPane_table_montant_classe = new javax.swing.JScrollPane();
        table_montant_classe = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_versement = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        button_imprimer_recu = new javax.swing.JButton();

        menu_item_tranche_add.setText("Ajouter nouvelle tranche");
        menu_item_tranche_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_tranche_addActionPerformed(evt);
            }
        });
        popup_tranche.add(menu_item_tranche_add);

        menu_item_tranche_update.setText("Mettre à jour les informations");
        menu_item_tranche_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_tranche_updateActionPerformed(evt);
            }
        });
        popup_tranche.add(menu_item_tranche_update);

        menu_item_tranche_remove.setText("Suprimer la tranche");
        menu_item_tranche_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_tranche_removeActionPerformed(evt);
            }
        });
        popup_tranche.add(menu_item_tranche_remove);

        menu_item_montant_classe_add.setText("Ajouter nouveau montant classe");
        menu_item_montant_classe_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_montant_classe_addActionPerformed(evt);
            }
        });
        popup_montant_classe.add(menu_item_montant_classe_add);

        menu_item_montant_classe_update.setText("Mettre à jour les informations");
        menu_item_montant_classe_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_montant_classe_updateActionPerformed(evt);
            }
        });
        popup_montant_classe.add(menu_item_montant_classe_update);

        menu_item_montant_classe_remove.setText("Suprimer le montant classe");
        menu_item_montant_classe_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_montant_classe_removeActionPerformed(evt);
            }
        });
        popup_montant_classe.add(menu_item_montant_classe_remove);

        menu_item_nouveau_versement_add.setText("Nouveau versement");
        menu_item_nouveau_versement_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_nouveau_versement_addActionPerformed(evt);
            }
        });
        popup_nouveau_versement.add(menu_item_nouveau_versement_add);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Année :");

        jLabel6.setText("Cycle :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Classe :");

        combo_box_annee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_annee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_anneeActionPerformed(evt);
            }
        });

        combo_box_cycle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_cycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_cycleActionPerformed(evt);
            }
        });

        combo_box_classe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_classe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_classeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Tranche :");

        combo_box_tranche.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_tranche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_trancheActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Sexe :");

        combo_box_sexe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tous", "M", "F" }));
        combo_box_sexe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_sexeActionPerformed(evt);
            }
        });

        jLabel4.setText("Rechercher :");

        text_field_rechercher.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                text_field_rechercherKeyReleased(evt);
            }
        });

        toggle_button.setText("Elèves enrégistrés");
        toggle_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggle_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_box_annee, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combo_box_cycle, 0, 200, Short.MAX_VALUE)
                            .addComponent(combo_box_classe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(text_field_rechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(combo_box_tranche, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(combo_box_sexe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(toggle_button))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(combo_box_annee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(combo_box_sexe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toggle_button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(combo_box_cycle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(combo_box_tranche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(combo_box_classe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(text_field_rechercher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        table_nouveau_versement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "N°", "Classe", "Matricule", "Nom et prénom", "Sexe", "N° parent/tuteur", "Total paiement", "Totale réduction", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll_pane_eleve.setViewportView(table_nouveau_versement);
        if (table_nouveau_versement.getColumnModel().getColumnCount() > 0) {
            table_nouveau_versement.getColumnModel().getColumn(0).setMinWidth(35);
            table_nouveau_versement.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_nouveau_versement.getColumnModel().getColumn(0).setMaxWidth(35);
            table_nouveau_versement.getColumnModel().getColumn(1).setPreferredWidth(100);
            table_nouveau_versement.getColumnModel().getColumn(1).setMaxWidth(100);
            table_nouveau_versement.getColumnModel().getColumn(2).setPreferredWidth(100);
            table_nouveau_versement.getColumnModel().getColumn(2).setMaxWidth(100);
            table_nouveau_versement.getColumnModel().getColumn(4).setPreferredWidth(50);
            table_nouveau_versement.getColumnModel().getColumn(4).setMaxWidth(50);
            table_nouveau_versement.getColumnModel().getColumn(5).setPreferredWidth(200);
            table_nouveau_versement.getColumnModel().getColumn(5).setMaxWidth(200);
            table_nouveau_versement.getColumnModel().getColumn(6).setPreferredWidth(150);
            table_nouveau_versement.getColumnModel().getColumn(6).setMaxWidth(150);
            table_nouveau_versement.getColumnModel().getColumn(7).setPreferredWidth(150);
            table_nouveau_versement.getColumnModel().getColumn(7).setMaxWidth(150);
            table_nouveau_versement.getColumnModel().getColumn(8).setPreferredWidth(100);
            table_nouveau_versement.getColumnModel().getColumn(8).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll_pane_eleve)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll_pane_eleve, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Liste des élèves", jPanel6);

        table_tranche.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "N°", "Tranche", "Pourcentage"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane_tranche.setViewportView(table_tranche);
        if (table_tranche.getColumnModel().getColumnCount() > 0) {
            table_tranche.getColumnModel().getColumn(0).setMinWidth(35);
            table_tranche.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_tranche.getColumnModel().getColumn(0).setMaxWidth(35);
            table_tranche.getColumnModel().getColumn(1).setPreferredWidth(200);
            table_tranche.getColumnModel().getColumn(2).setPreferredWidth(100);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane_tranche, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane_tranche, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Tranche", jPanel1);

        table_montant_classe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "N°", "Classe", "Montant"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane_table_montant_classe.setViewportView(table_montant_classe);
        if (table_montant_classe.getColumnModel().getColumnCount() > 0) {
            table_montant_classe.getColumnModel().getColumn(0).setMinWidth(35);
            table_montant_classe.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_montant_classe.getColumnModel().getColumn(0).setMaxWidth(35);
            table_montant_classe.getColumnModel().getColumn(1).setPreferredWidth(200);
            table_montant_classe.getColumnModel().getColumn(2).setPreferredWidth(100);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane_table_montant_classe, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane_table_montant_classe, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Montant classe", jPanel3);

        table_versement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "N°", "Année", "Classe", "Nom et prénom", "Tranche", "Montant", "Réduction", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(table_versement);
        if (table_versement.getColumnModel().getColumnCount() > 0) {
            table_versement.getColumnModel().getColumn(0).setMinWidth(35);
            table_versement.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_versement.getColumnModel().getColumn(0).setMaxWidth(35);
            table_versement.getColumnModel().getColumn(1).setPreferredWidth(100);
            table_versement.getColumnModel().getColumn(1).setMaxWidth(100);
            table_versement.getColumnModel().getColumn(2).setPreferredWidth(100);
            table_versement.getColumnModel().getColumn(2).setMaxWidth(100);
            table_versement.getColumnModel().getColumn(3).setPreferredWidth(200);
            table_versement.getColumnModel().getColumn(4).setPreferredWidth(150);
            table_versement.getColumnModel().getColumn(4).setMaxWidth(150);
            table_versement.getColumnModel().getColumn(5).setPreferredWidth(200);
            table_versement.getColumnModel().getColumn(5).setMaxWidth(200);
            table_versement.getColumnModel().getColumn(6).setPreferredWidth(200);
            table_versement.getColumnModel().getColumn(6).setMaxWidth(200);
            table_versement.getColumnModel().getColumn(7).setPreferredWidth(150);
            table_versement.getColumnModel().getColumn(7).setMaxWidth(150);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Versement", jPanel4);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        button_imprimer_recu.setText("Imprimer reçu");
        button_imprimer_recu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_imprimer_recuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_imprimer_recu)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_imprimer_recu)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(tabbedPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(tabbedPane)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void combo_box_anneeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_anneeActionPerformed
        init_combo_box_classe();
    }//GEN-LAST:event_combo_box_anneeActionPerformed

    private void combo_box_cycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_cycleActionPerformed
        init_combo_box_classe();
    }//GEN-LAST:event_combo_box_cycleActionPerformed

    private void combo_box_classeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_classeActionPerformed
        table_versement();
        table_montant_classe();
        table_eleve();
    }//GEN-LAST:event_combo_box_classeActionPerformed

    private void combo_box_trancheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_trancheActionPerformed
        table_tranche();
        table_versement();
    }//GEN-LAST:event_combo_box_trancheActionPerformed

    private void combo_box_sexeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_sexeActionPerformed
        table_versement();
        table_eleve();
    }//GEN-LAST:event_combo_box_sexeActionPerformed

    private void text_field_rechercherKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_text_field_rechercherKeyReleased
        table_versement();
        table_eleve();
    }//GEN-LAST:event_text_field_rechercherKeyReleased

    private void toggle_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggle_buttonActionPerformed
        table_eleve();
    }//GEN-LAST:event_toggle_buttonActionPerformed

    private void menu_item_tranche_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_tranche_addActionPerformed
        add_tranche();
    }//GEN-LAST:event_menu_item_tranche_addActionPerformed

    private void menu_item_tranche_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_tranche_updateActionPerformed
        update_tranche();
    }//GEN-LAST:event_menu_item_tranche_updateActionPerformed

    private void menu_item_tranche_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_tranche_removeActionPerformed
        remove_tranche();
    }//GEN-LAST:event_menu_item_tranche_removeActionPerformed

    private void menu_item_montant_classe_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_montant_classe_addActionPerformed
        add_montant_classe();
    }//GEN-LAST:event_menu_item_montant_classe_addActionPerformed

    private void menu_item_montant_classe_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_montant_classe_updateActionPerformed
        update_montant_classe();
    }//GEN-LAST:event_menu_item_montant_classe_updateActionPerformed

    private void menu_item_montant_classe_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_montant_classe_removeActionPerformed
        remove_montant_classe();
    }//GEN-LAST:event_menu_item_montant_classe_removeActionPerformed

    private void menu_item_nouveau_versement_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_nouveau_versement_addActionPerformed
        add_versement();
    }//GEN-LAST:event_menu_item_nouveau_versement_addActionPerformed

    private void button_imprimer_recuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_imprimer_recuActionPerformed
        print_recu();
    }//GEN-LAST:event_button_imprimer_recuActionPerformed
    private final HashMap<Integer, Long> id_annees, id_cycles, id_classes, id_tranches, id_table_tranches, id_table_montant_classes, id_table_versements, id_table_eleve_classes;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_imprimer_recu;
    private javax.swing.JComboBox<String> combo_box_annee;
    private javax.swing.JComboBox<String> combo_box_classe;
    private javax.swing.JComboBox<String> combo_box_cycle;
    private javax.swing.JComboBox<String> combo_box_sexe;
    private javax.swing.JComboBox<String> combo_box_tranche;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem menu_item_montant_classe_add;
    private javax.swing.JMenuItem menu_item_montant_classe_remove;
    private javax.swing.JMenuItem menu_item_montant_classe_update;
    private javax.swing.JMenuItem menu_item_nouveau_versement_add;
    private javax.swing.JMenuItem menu_item_tranche_add;
    private javax.swing.JMenuItem menu_item_tranche_remove;
    private javax.swing.JMenuItem menu_item_tranche_update;
    private javax.swing.JPopupMenu popup_montant_classe;
    private javax.swing.JPopupMenu popup_nouveau_versement;
    private javax.swing.JPopupMenu popup_tranche;
    private javax.swing.JScrollPane scrollPane_table_montant_classe;
    private javax.swing.JScrollPane scrollPane_tranche;
    private javax.swing.JScrollPane scroll_pane_eleve;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable table_montant_classe;
    private javax.swing.JTable table_nouveau_versement;
    private javax.swing.JTable table_tranche;
    private javax.swing.JTable table_versement;
    private javax.swing.JTextField text_field_rechercher;
    private javax.swing.JToggleButton toggle_button;
    // End of variables declaration//GEN-END:variables

    private static void addPopup(Component component, final JPopupMenu popup) {
        component.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            private void showMenu(MouseEvent e) {
                popup.show(e.getComponent(), e.getX(), e.getY());
            }
        });
    }

    private void popup() {
        addPopup(scrollPane_tranche, popup_tranche);
        addPopup(table_tranche, popup_tranche);
        addPopup(scrollPane_table_montant_classe, popup_montant_classe);
        addPopup(table_montant_classe, popup_montant_classe);
        addPopup(scroll_pane_eleve, popup_nouveau_versement);
        addPopup(table_nouveau_versement, popup_nouveau_versement);
    }

    private void init_combo_box_annee() {
        combo_box_annee.removeAllItems();
        id_annees.clear();
        try {
            ArrayList<Annee> list = getController().getAnneeController().gets();
            for (int i = 0; i < list.size(); i++) {
                combo_box_annee.addItem(list.get(i).getAnnee());
                id_annees.put(i, list.get(i).getId());
            }
        } catch (Exception e) {
            combo_box_annee.removeAllItems();
            id_annees.clear();
        }
    }

    private void init_combo_box_cycle() {
        combo_box_cycle.removeAllItems();
        id_cycles.clear();
        try {
            ArrayList<Cycle> list = getController().getCycleController().gets();
            for (int i = 0; i < list.size(); i++) {
                combo_box_cycle.addItem(list.get(i).getCycle());
                id_cycles.put(i, list.get(i).getId());
            }
        } catch (Exception e) {
            combo_box_cycle.removeAllItems();
            id_cycles.clear();
        }
    }

    private void init_combo_box_tranche() {
        combo_box_tranche.removeAllItems();
        id_tranches.clear();
        try {
            ArrayList<Tranche> list = getController().getTrancheController().gets();
            if (list.size() > 1) {
                combo_box_tranche.addItem("Toutes");
                id_tranches.put(0, null);
                for (int i = 0; i < list.size(); i++) {
                    Tranche tranche = list.get(i);
                    combo_box_tranche.addItem(tranche.getTranche());
                    id_tranches.put(i + 1, tranche.getId());
                }
            } else {
                for (int i = 0; i < list.size(); i++) {
                    Tranche tranche = list.get(i);
                    combo_box_tranche.addItem(tranche.getTranche());
                    id_tranches.put(i, tranche.getId());
                }
            }

        } catch (Exception e) {
            combo_box_tranche.removeAllItems();
            id_tranches.clear();
        }
    }

    private void init_combo_box_classe() {
        combo_box_classe.removeAllItems();
        id_classes.clear();
        try {
            if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0) {
                return;
            }
            Long id_annee = id_annees.get(combo_box_annee.getSelectedIndex());
            Long id_cycle = id_cycles.get(combo_box_cycle.getSelectedIndex());
            ArrayList<Classe> list = getController().getClasseController().gets(id_annee, id_cycle);
            if (list.size() > 1) {
                combo_box_classe.addItem("Toutes");
                id_classes.put(0, null);
                for (int i = 0; i < list.size(); i++) {
                    combo_box_classe.addItem(list.get(i).getClasse());
                    id_classes.put(i + 1, list.get(i).getId());
                }
            } else {
                for (int i = 0; i < list.size(); i++) {
                    combo_box_classe.addItem(list.get(i).getClasse());
                    id_classes.put(i, list.get(i).getId());
                }
            }
        } catch (Exception e) {
            combo_box_classe.removeAllItems();
            id_classes.clear();
        }
    }

    private void table_tranche() {
        DefaultTableModel model = (DefaultTableModel) table_tranche.getModel();
        model.setRowCount(0);
        id_table_tranches.clear();
        ArrayList<bean.Tranche> list = getController().getTrancheController().gets();
        for (int i = 0; i < list.size(); i++) {
            Object row[] = new Object[3];
            row[0] = i + 1;
            row[1] = list.get(i).getTranche();
            row[2] = list.get(i).getPourcentage();
            id_table_tranches.put(i, list.get(i).getId());
            model.addRow(row);
        }
        table_tranche.setModel(model);
        table_tranche.setShowVerticalLines(true);
        table_tranche.setShowHorizontalLines(true);
    }

    private void table_montant_classe() {
        DefaultTableModel model = (DefaultTableModel) table_montant_classe.getModel();
        model.setRowCount(0);
        id_table_montant_classes.clear();
        Long id_annee = id_annees.get(combo_box_annee.getSelectedIndex());
        Long id_cycle = id_cycles.get(combo_box_cycle.getSelectedIndex());
        Long id_classe = id_classes.get(combo_box_classe.getSelectedIndex());
        Double somme_montant = 0.0;
        ArrayList<bean.MontantClasse> list = getController().getMontantClasseController().gets(id_annee, id_cycle, id_classe);
        for (int i = 0; i < list.size(); i++) {
            Object row[] = new Object[3];
            MontantClasse montantClasse = list.get(i);
            Classe classe = getController().getClasseController().get(montantClasse.getId_classe());
            Double montant = list.get(i).getMontant();
            row[0] = i + 1;
            row[1] = classe.getClasse();
            row[2] = montant;
            id_table_montant_classes.put(i, montantClasse.getId());
            model.addRow(row);
            somme_montant += montant;
        }
        Object row[] = new Object[3];
        row[0] = "###";
        row[1] = "Somme montant";
        row[2] = somme_montant;
        model.addRow(row);
        table_montant_classe.setModel(model);
        table_montant_classe.setShowVerticalLines(true);
        table_montant_classe.setShowHorizontalLines(true);
        table_montant_classe.getColumnModel().getColumn(2).setCellRenderer(NumberRenderer.get_FCFA_render());
    }

    private void table_versement() {
        DefaultTableModel model = (DefaultTableModel) table_versement.getModel();
        model.setRowCount(0);
        id_table_versements.clear();
        if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0 || combo_box_classe.getSelectedIndex() < 0 || combo_box_tranche.getSelectedIndex() < 0 || combo_box_sexe.getSelectedIndex() < 0) {
            return;
        }
        Long id_annee = id_annees.get(combo_box_annee.getSelectedIndex());
        Long id_cycle = id_cycles.get(combo_box_cycle.getSelectedIndex());
        Long id_classe = id_classes.get(combo_box_classe.getSelectedIndex());
        Long id_tranche = id_tranches.get(combo_box_tranche.getSelectedIndex());
        String sexe = combo_box_sexe.getSelectedItem().toString();
        String rechercher = text_field_rechercher.getText();
        Double somme_montant = 0.0;
        Double somme_reduction = 0.0;
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd MMM yyyy à HH:mm:ss");
        ArrayList<bean.Versement> list = getController().getVersementController().gets(null, id_annee, id_cycle, id_classe, id_tranche, sexe, rechercher);
        for (int i = 0; i < list.size(); i++) {
            Object row[] = new Object[8];
            Versement versement = list.get(i);
            Eleve eleve = getController().getEleveController().get(versement.getId_eleve());
            Tranche tranche = getController().getTrancheController().get(versement.getId_tranche());
            MontantClasse montantClasse = getController().getMontantClasseController().get(versement.getId_montant_classe());
            Classe classe = getController().getClasseController().get(montantClasse.getId_classe());
            row[0] = i + 1;
            row[1] = getController().getAnneeController().get(classe.getId_annee()).getAnnee();
            row[2] = classe.getClasse();
            row[3] = eleve.getNom_prenom();
            row[4] = tranche.getTranche();
            row[5] = versement.getMontant();
            row[6] = versement.getReduction();
            row[7] = simpleDateFormat.format(versement.getDate());
            id_table_versements.put(i, versement.getId());
            model.addRow(row);
            somme_montant += versement.getMontant();
            somme_reduction += versement.getReduction();
        }
        Object row[] = new Object[8];
        row[0] = "###";
        row[1] = "";
        row[2] = "Somme montant";
        row[3] = "";
        row[4] = "";
        row[5] = somme_montant;
        row[6] = somme_reduction;
        row[7] = "";
        model.addRow(row);
        table_versement.setModel(model);
        table_versement.setShowVerticalLines(true);
        table_versement.setShowHorizontalLines(true);
        table_versement.getColumnModel().getColumn(5).setCellRenderer(NumberRenderer.get_FCFA_render());
        table_versement.getColumnModel().getColumn(6).setCellRenderer(NumberRenderer.get_FCFA_render());
    }

    private void table_eleve() {
        DefaultTableModel model = (DefaultTableModel) table_nouveau_versement.getModel();
        model.setRowCount(0);
        id_table_eleve_classes.clear();
        if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0 || combo_box_classe.getSelectedIndex() < 0 || combo_box_sexe.getSelectedIndex() < 0) {
            return;
        }
        Long id_annee = id_annees.get(combo_box_annee.getSelectedIndex());
        Long id_cycle = id_cycles.get(combo_box_cycle.getSelectedIndex());
        Long id_classe = id_classes.get(combo_box_classe.getSelectedIndex());
        Long id_nationalite = null;
        String rechercher = null;
        String sexe = combo_box_sexe.getSelectedItem().toString();
        if (!text_field_rechercher.getText().isBlank()) {
            rechercher = text_field_rechercher.getText();
        }
        ArrayList<EleveClasse> list = getController().getEleveClasseController().gets(null, id_annee, id_cycle, id_classe, rechercher, id_nationalite, sexe);
        for (int i = 0; i < list.size(); i++) {
            Object row[] = new Object[9];
            EleveClasse eleveClasse = list.get(i);
            Eleve eleve = getController().getEleveController().get(eleveClasse.getId_eleve());
            Classe classe = getController().getClasseController().get(eleveClasse.getId_classe());
            ArrayList<Versement> list_versement = getController().getVersementController().gets(eleve.getId(), classe.getId_annee(), classe.getId_cycle(), classe.getId(), null, sexe, rechercher);
            Double somme_paye = 0.0;
            Double somme_reduit = 0.0;
            for (int j = 0; j < list_versement.size(); j++) {
                Versement vers = list_versement.get(j);
                somme_paye += vers.getMontant();
                somme_reduit += vers.getReduction();
            }
            boolean payer = false;
            MontantClasse montantClasse = getController().getMontantClasseController().get(null, classe.getId());
            if (somme_paye + somme_reduit >= montantClasse.getMontant()) {
                payer = true;
            }
            row[0] = i + 1;
            row[1] = classe.getClasse();
            row[2] = eleve.getMatricule();
            row[3] = eleve.getNom_prenom();
            row[4] = eleve.getSexe();
            row[5] = eleve.getContact();
            row[6] = somme_paye;
            row[7] = somme_reduit;
            row[8] = payer ? "Payé" : "Non payé";
            id_table_eleve_classes.put(i, eleveClasse.getId());
            model.addRow(row);
        }
        table_nouveau_versement.setModel(model);
        table_nouveau_versement.setShowVerticalLines(true);
        table_nouveau_versement.setShowHorizontalLines(true);
        table_nouveau_versement.getColumnModel().getColumn(6).setCellRenderer(NumberRenderer.get_FCFA_render());
        table_nouveau_versement.getColumnModel().getColumn(7).setCellRenderer(NumberRenderer.get_FCFA_render());

    }

    private void add_tranche() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        TrancheDialog trancheDialog = new TrancheDialog(null, true);
        trancheDialog.setVisible(true);
        init_combo_box_tranche();
        table_tranche();
        table_eleve();
    }

    private void add_montant_classe() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        MontantClasseDialog montantClasseDialog = new MontantClasseDialog(null, true);
        montantClasseDialog.setVisible(true);
        table_montant_classe();
        table_eleve();
    }

    private void update_tranche() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_tranche.getSelectedRow();
        if (row < 0) {
            return;
        }
        Tranche tranche = getController().getTrancheController().get(id_table_tranches.get(row));
        TrancheDialog trancheDialog = new TrancheDialog(null, true, tranche);
        trancheDialog.setVisible(true);
        init_combo_box_tranche();
        table_tranche();
        table_eleve();
    }

    private void update_montant_classe() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_montant_classe.getSelectedRow();
        if (row < 0 || row >= table_montant_classe.getRowCount() - 1) {
            return;
        }
        MontantClasse montantClasse = getController().getMontantClasseController().get(id_table_montant_classes.get(row));
        MontantClasseDialog montantClasseDialog = new MontantClasseDialog(null, true, montantClasse);
        montantClasseDialog.setVisible(true);
        table_montant_classe();
        table_eleve();
    }

    private void remove_tranche() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_tranche.getSelectedRow();
        if (row < 0) {
            return;
        }
        Tranche tranche = getController().getTrancheController().get(id_table_tranches.get(row));
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer " + tranche.getTranche() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
        if (choice == 0) {
            getController().getTrancheController().remove(tranche.getId());
            init_combo_box_tranche();
            table_tranche();
            table_eleve();
        }
    }

    private void remove_montant_classe() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_montant_classe.getSelectedRow();
        if (row < 0) {
            return;
        }
        MontantClasse montantClasse = getController().getMontantClasseController().get(id_table_montant_classes.get(row));
        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer le montant classe sélectionné ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
        if (choice == 0) {
            getController().getMontantClasseController().remove(montantClasse.getId());
            table_montant_classe();
            table_eleve();
        }
    }

    private void add_versement() {
        if (!getDroit().isSuprimer()) {
            JOptionPane.showMessageDialog(this, "Veuillez contacter le super Administrateur ", "Droit super Administrateur réquis !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = table_nouveau_versement.getSelectedRow();
        if (row < 0) {
            return;
        }
        EleveClasse eleveClasse = getController().getEleveClasseController().get(id_table_eleve_classes.get(row));
        MontantClasse montantClasse = getController().getMontantClasseController().get(null, eleveClasse.getId_classe());
        if (montantClasse == null) {
            JOptionPane.showMessageDialog(this, "Pas de montant défini pour cette classe ", "Montant classe !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        VersementDialog versementDialog = new VersementDialog(null, true, eleveClasse);
        versementDialog.setVisible(true);
        table_versement();
        table_eleve();
    }

    private void print_recu() {
        int row = table_versement.getSelectedRow();
        if (row < 0) {
            return;
        }
        Long id_versement = id_table_versements.get(row);
        System.out.println("row" + row);
        System.out.println("id_versement" + id_versement);
        Versement versement = getController().getVersementController().get(id_versement);
        Long id_eleve = versement.getId_eleve();
        Long id_tranche = versement.getId_tranche();
        MontantClasse montantClasse = getController().getMontantClasseController().get(versement.getId_montant_classe());
        Long id_classe = montantClasse.getId_classe();
        try {
            HashMap<String, Object> m = new HashMap<>();
            String reports = System.getProperty("user.dir") + "\\ressources\\report\\Recu_paiement.jasper";
            m.put("id_eleve", id_eleve);
            m.put("id_classe", id_classe);
            m.put("id_tranche", id_tranche);
            JasperPrint jasperPrint = JasperFillManager.fillReport(reports, m, getConnection());
            JasperViewer.viewReport(jasperPrint, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, " Echec d'impression\n" + ex.getMessage());
        }
    }
}
