/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.panel;

import bean.Absence;
import bean.Annee;
import bean.Classe;
import bean.Cycle;
import bean.Eleve;
import bean.EleveClasse;
import bean.Retard;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static main.Main.getController;
import view.dialog.AbsenceRetardDialog;

/**
 *
 * @author Toukou Habi
 */
public class AbsenceRetardPanel extends javax.swing.JPanel {

    /**
     * Creates new form AbsenceRetardPanel
     */
    public AbsenceRetardPanel() {
        id_annees = new HashMap<>();
        id_cycles = new HashMap<>();
        id_classes = new HashMap<>();
        id_table_absences = new HashMap<>();
        id_table_retards = new HashMap<>();
        id_table_eleves = new HashMap<>();
        initComponents();
        init_combo_box_annee();
        init_combo_box_cycle();
        table_absence();
        table_retard();
        table_eleve();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        combo_box_annee = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        combo_box_cycle = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        combo_box_classe = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        date_chooser = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        text_field_rechercher = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        button_new = new javax.swing.JButton();
        button_update = new javax.swing.JButton();
        button_remove = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        scroll_pane_eleve = new javax.swing.JScrollPane();
        table_eleve = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_absence = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_retard = new javax.swing.JTable();

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Année :");

        combo_box_annee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_annee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_anneeActionPerformed(evt);
            }
        });

        jLabel6.setText("Cycle :");

        combo_box_cycle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_cycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_cycleActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Classe :");

        combo_box_classe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_classe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_classeActionPerformed(evt);
            }
        });

        jLabel2.setText("Date :");

        date_chooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                date_chooserPropertyChange(evt);
            }
        });

        jLabel4.setText("Rechercher :");

        text_field_rechercher.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                text_field_rechercherKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_box_annee, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combo_box_cycle, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(combo_box_classe, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(text_field_rechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(combo_box_annee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(combo_box_cycle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(date_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_box_classe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(text_field_rechercher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        button_new.setText("Nouveau");
        button_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_newActionPerformed(evt);
            }
        });

        button_update.setText("Mettre à jour");
        button_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_updateActionPerformed(evt);
            }
        });

        button_remove.setText("Supprimer");
        button_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_removeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_new)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(button_update)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(button_remove)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_new)
                    .addComponent(button_update)
                    .addComponent(button_remove))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        table_eleve.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "N°", "Classe", "Matricule", "Nom et prénom", "Nb Absences", "Nb Retards", "N° parent/tuteur"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scroll_pane_eleve.setViewportView(table_eleve);
        if (table_eleve.getColumnModel().getColumnCount() > 0) {
            table_eleve.getColumnModel().getColumn(0).setMinWidth(35);
            table_eleve.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_eleve.getColumnModel().getColumn(0).setMaxWidth(35);
            table_eleve.getColumnModel().getColumn(1).setPreferredWidth(100);
            table_eleve.getColumnModel().getColumn(1).setMaxWidth(100);
            table_eleve.getColumnModel().getColumn(2).setPreferredWidth(100);
            table_eleve.getColumnModel().getColumn(2).setMaxWidth(100);
            table_eleve.getColumnModel().getColumn(4).setPreferredWidth(100);
            table_eleve.getColumnModel().getColumn(4).setMaxWidth(100);
            table_eleve.getColumnModel().getColumn(5).setPreferredWidth(100);
            table_eleve.getColumnModel().getColumn(5).setMaxWidth(100);
            table_eleve.getColumnModel().getColumn(6).setPreferredWidth(200);
            table_eleve.getColumnModel().getColumn(6).setMaxWidth(200);
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll_pane_eleve)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll_pane_eleve, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Liste des élèves", jPanel5);

        table_absence.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "N°", "Classe", "Matricule", "Nom prénom", "Date", "Observation"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_absence);
        if (table_absence.getColumnModel().getColumnCount() > 0) {
            table_absence.getColumnModel().getColumn(0).setMinWidth(35);
            table_absence.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_absence.getColumnModel().getColumn(0).setMaxWidth(35);
            table_absence.getColumnModel().getColumn(1).setPreferredWidth(100);
            table_absence.getColumnModel().getColumn(1).setMaxWidth(100);
            table_absence.getColumnModel().getColumn(2).setPreferredWidth(100);
            table_absence.getColumnModel().getColumn(2).setMaxWidth(100);
            table_absence.getColumnModel().getColumn(3).setPreferredWidth(300);
            table_absence.getColumnModel().getColumn(4).setPreferredWidth(150);
            table_absence.getColumnModel().getColumn(4).setMaxWidth(150);
            table_absence.getColumnModel().getColumn(5).setPreferredWidth(300);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Historique des absences", jPanel1);

        table_retard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "N°", "Classe", "Matricule", "Nom prénom", "Date", "Observation"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(table_retard);
        if (table_retard.getColumnModel().getColumnCount() > 0) {
            table_retard.getColumnModel().getColumn(0).setMinWidth(35);
            table_retard.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_retard.getColumnModel().getColumn(0).setMaxWidth(35);
            table_retard.getColumnModel().getColumn(1).setPreferredWidth(100);
            table_retard.getColumnModel().getColumn(1).setMaxWidth(100);
            table_retard.getColumnModel().getColumn(2).setPreferredWidth(100);
            table_retard.getColumnModel().getColumn(2).setMaxWidth(100);
            table_retard.getColumnModel().getColumn(3).setPreferredWidth(300);
            table_retard.getColumnModel().getColumn(4).setPreferredWidth(150);
            table_retard.getColumnModel().getColumn(4).setMaxWidth(150);
            table_retard.getColumnModel().getColumn(5).setPreferredWidth(300);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Historique des retards", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16)
                .addComponent(tabbedPane)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void combo_box_anneeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_anneeActionPerformed
        init_combo_box_classe();
    }//GEN-LAST:event_combo_box_anneeActionPerformed

    private void combo_box_cycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_cycleActionPerformed
        init_combo_box_classe();
        table_absence();
        table_retard();
        table_eleve();
    }//GEN-LAST:event_combo_box_cycleActionPerformed

    private void combo_box_classeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_classeActionPerformed
        table_absence();
        table_retard();
        table_eleve();
    }//GEN-LAST:event_combo_box_classeActionPerformed

    private void date_chooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_date_chooserPropertyChange
        table_absence();
        table_retard();
    }//GEN-LAST:event_date_chooserPropertyChange

    private void text_field_rechercherKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_text_field_rechercherKeyReleased
        table_absence();
        table_retard();
        table_eleve();
    }//GEN-LAST:event_text_field_rechercherKeyReleased

    private void button_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_newActionPerformed
        if (tabbedPane.getSelectedIndex() == 0) {
            add_sanction();
        }
    }//GEN-LAST:event_button_newActionPerformed

    private void button_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_updateActionPerformed
        if (tabbedPane.getSelectedIndex() == 1 || tabbedPane.getSelectedIndex() == 2) {
            update_sanction();
        }
    }//GEN-LAST:event_button_updateActionPerformed

    private void button_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_removeActionPerformed
        if (tabbedPane.getSelectedIndex() == 1 || tabbedPane.getSelectedIndex() == 2) {
            remove_sanction();
        }
    }//GEN-LAST:event_button_removeActionPerformed
    private final HashMap<Integer, Long> id_annees, id_cycles, id_classes, id_table_absences, id_table_retards, id_table_eleves;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_new;
    private javax.swing.JButton button_remove;
    private javax.swing.JButton button_update;
    private javax.swing.JComboBox<String> combo_box_annee;
    private javax.swing.JComboBox<String> combo_box_classe;
    private javax.swing.JComboBox<String> combo_box_cycle;
    private com.toedter.calendar.JDateChooser date_chooser;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane scroll_pane_eleve;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable table_absence;
    private javax.swing.JTable table_eleve;
    private javax.swing.JTable table_retard;
    private javax.swing.JTextField text_field_rechercher;
    // End of variables declaration//GEN-END:variables

    private void table_absence() {
        DefaultTableModel model = (DefaultTableModel) table_absence.getModel();
        model.setRowCount(0);
        id_table_absences.clear();
        if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0 || combo_box_classe.getSelectedIndex() < 0) {
            return;
        }
        Long id_annee = id_annees.get(combo_box_annee.getSelectedIndex());
        Long id_classe = id_classes.get(combo_box_classe.getSelectedIndex());
        String rechercher = null;
        Timestamp date = null;
        if (!text_field_rechercher.getText().isEmpty()) {
            rechercher = text_field_rechercher.getText();
        }
        if (date_chooser.getDate() != null) {
            date = new Timestamp(date_chooser.getDate().getTime());
        }
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd MMM yyyy à HH:mm:ss");
        ArrayList<bean.Absence> list = getController().getAbsenceController().gets(null, id_annee, id_classe, date, rechercher);
        for (int i = 0; i < list.size(); i++) {
            Object row[] = new Object[6];
            Absence absence = list.get(i);
            EleveClasse eleveClasse = getController().getEleveClasseController().get(absence.getId_eleve_classe());
            Classe classe = getController().getClasseController().get(eleveClasse.getId_classe());
            Eleve eleve = getController().getEleveController().get(eleveClasse.getId_eleve());
            row[0] = i + 1;
            row[1] = classe.getClasse();
            row[2] = eleve.getMatricule();
            row[3] = eleve.getNom_prenom();
            row[4] = simpleDateFormat.format(absence.getDate());
            row[5] = absence.getCommentaire();
            id_table_absences.put(i, absence.getId());
            model.addRow(row);
        }
        table_absence.setModel(model);
        table_absence.setShowVerticalLines(true);
        table_absence.setShowHorizontalLines(true);
    }

    private void table_retard() {
        DefaultTableModel model = (DefaultTableModel) table_retard.getModel();
        model.setRowCount(0);
        id_table_retards.clear();
        if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0 || combo_box_classe.getSelectedIndex() < 0) {
            return;
        }
        Long id_annee = id_annees.get(combo_box_annee.getSelectedIndex());
        Long id_classe = id_classes.get(combo_box_classe.getSelectedIndex());
        String rechercher = null;
        Timestamp date = null;
        if (!text_field_rechercher.getText().isEmpty()) {
            rechercher = text_field_rechercher.getText();
        }
        if (date_chooser.getDate() != null) {
            date = new Timestamp(date_chooser.getDate().getTime());
        }
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd MMM yyyy à HH:mm:ss");
        ArrayList<bean.Retard> list = getController().getRetardController().gets(null, id_annee, id_classe, date, rechercher);
        for (int i = 0; i < list.size(); i++) {
            Object row[] = new Object[6];
            Retard retard = list.get(i);
            EleveClasse eleveClasse = getController().getEleveClasseController().get(retard.getId_eleve_classe());
            Classe classe = getController().getClasseController().get(eleveClasse.getId_classe());
            Eleve eleve = getController().getEleveController().get(eleveClasse.getId_eleve());
            row[0] = i + 1;
            row[1] = classe.getClasse();
            row[2] = eleve.getMatricule();
            row[3] = eleve.getNom_prenom();
            row[4] = simpleDateFormat.format(retard.getDate());
            row[5] = retard.getCommentaire();
            id_table_retards.put(i, retard.getId());
            model.addRow(row);
        }
        table_retard.setModel(model);
        table_retard.setShowVerticalLines(true);
        table_retard.setShowHorizontalLines(true);
    }

    private void table_eleve() {
        DefaultTableModel model = (DefaultTableModel) table_eleve.getModel();
        model.setRowCount(0);
        id_table_eleves.clear();
        try {
            if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0 || combo_box_classe.getSelectedIndex() < 0) {
                return;
            }
            Long id_annee = id_annees.get(combo_box_annee.getSelectedIndex());
            Long id_cycle = id_cycles.get(combo_box_cycle.getSelectedIndex());
            Long id_classe = id_classes.get(combo_box_classe.getSelectedIndex());
            Long id_nationalite = null;
            String rechercher = null;
            if (!text_field_rechercher.getText().isBlank()) {
                rechercher = text_field_rechercher.getText();
            }
            ArrayList<EleveClasse> list = getController().getEleveClasseController().gets(null, id_annee, id_cycle, id_classe, rechercher, id_nationalite, null);
            for (int i = 0; i < list.size(); i++) {
                Object row[] = new Object[7];
                EleveClasse eleveClasse = list.get(i);
                Eleve eleve = getController().getEleveController().get(eleveClasse.getId_eleve());
                Classe classe = getController().getClasseController().get(eleveClasse.getId_classe());
                row[0] = i + 1;
                row[1] = classe.getClasse();
                row[2] = eleve.getMatricule();
                row[3] = eleve.getNom_prenom();
                row[4] = getController().getAbsenceController().gets(eleve.getId(), id_annee, id_classe, null, null).size();
                row[5] = getController().getRetardController().gets(eleve.getId(), id_annee, id_classe, null, null).size();
                row[6] = eleve.getContact();
                id_table_eleves.put(i, eleve.getId());
                model.addRow(row);
            }
            table_eleve.setModel(model);
            table_eleve.setShowVerticalLines(true);
            table_eleve.setShowHorizontalLines(true);
        } catch (Exception e) {
            model.setRowCount(0);
            id_table_eleves.clear();
        }
    }

    private void init_combo_box_annee() {
        id_annees.clear();
        combo_box_annee.removeAllItems();
        try {
            ArrayList<Annee> list = getController().getAnneeController().gets();
            for (int i = 0; i < list.size(); i++) {
                Annee annee = list.get(i);
                combo_box_annee.addItem(annee.getAnnee());
                id_annees.put(i, annee.getId());
            }
        } catch (Exception e) {
            id_annees.clear();
            combo_box_annee.removeAllItems();
        }

    }

    private void init_combo_box_cycle() {
        id_cycles.clear();
        combo_box_cycle.removeAllItems();
        try {
            ArrayList<Cycle> list = getController().getCycleController().gets();
            for (int i = 0; i < list.size(); i++) {
                Cycle cycle = list.get(i);
                combo_box_cycle.addItem(cycle.getCycle());
                id_cycles.put(i, cycle.getId());
            }
        } catch (Exception e) {
            id_cycles.clear();
            combo_box_cycle.removeAllItems();
        }
    }

    private void init_combo_box_classe() {
        id_classes.clear();
        combo_box_classe.removeAllItems();
        try {
            if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0) {
                return;
            }
            Long id_annee = id_annees.get(combo_box_annee.getSelectedIndex());
            Long id_cycle = id_cycles.get(combo_box_cycle.getSelectedIndex());
            ArrayList<Classe> list = getController().getClasseController().gets(id_annee, id_cycle);
            for (int i = 0; i < list.size(); i++) {
                Classe classe = list.get(i);
                combo_box_classe.addItem(classe.getClasse());
                id_classes.put(i, classe.getId());
            }
        } catch (Exception e) {
            id_classes.clear();
            combo_box_classe.removeAllItems();
        }
    }

//    private static void addPopup(Component component, final JPopupMenu popup) {
//        component.addMouseListener(new MouseAdapter() {
//            @Override
//            public void mousePressed(MouseEvent e) {
//                if (e.isPopupTrigger()) {
//                    showMenu(e);
//                }
//            }
//
//            @Override
//            public void mouseReleased(MouseEvent e) {
//                if (e.isPopupTrigger()) {
//                    showMenu(e);
//                }
//            }
//
//            private void showMenu(MouseEvent e) {
//                popup.show(e.getComponent(), e.getX(), e.getY());
//            }
//        });
//    }
//
//    private void popup() {
////        addPopup(scroll_pane_absence_retard, popup_menu);
////        addPopup(table_absence_retard, popup_menu);
//    }
//
//    private void contacter() {
////        int row = table_absence.getSelectedRow();
////        if (row < 0) {
////            return;
////        }
////        Long id_absence = id_table_absences.get(row);
////        ContacterDialog contacter = new ContacterDialog(this, true, eleve);
////        contacter.setVisible(true);
//    }
//
//    private void retirer() {
////        int row = table_absence.getSelectedRow();
////        if (row < 0) {
////            return;
////        }
////        Long id_absence = id_table_absences.get(row);
////        Absence absence = getController().getAbsenceController().get(id_absence);
////        Eleve eleve = getController().getEleveController().get(null);
////        int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir retirer : " + absenceRetard.getAbsence_retard() + " de l'eleve " + eleve.getNom_prenom() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
////        if (choice == 0) {
////            getController().getAbsenceRetardController().remove(id);
////            table_absence_retard();
////        }
//    }
    private void add_sanction() {
        int row_count = table_eleve.getSelectedRowCount();
        if (row_count == 0) {
            return;
        }
        int[] rows = table_eleve.getSelectedRows();
        Long id_classe = id_classes.get(combo_box_classe.getSelectedIndex());
        ArrayList<EleveClasse> list = new ArrayList<>();
        for (int i = 0; i < rows.length; i++) {
            int row = rows[i];
            list.add(getController().getEleveClasseController().get(id_table_eleves.get(row), id_classe));
        }
        AbsenceRetardDialog absenceRetardDialog = new AbsenceRetardDialog(null, true, list);
        absenceRetardDialog.setVisible(true);
        table_absence();
        table_retard();
        table_eleve();
    }

    private void update_sanction() {
        int row;
        Long id_sanction;
        String sanction;
        switch (tabbedPane.getSelectedIndex()) {
            case 0 -> {
                row = table_absence.getSelectedRow();
                if (row < 0) {
                    return;
                }
                id_sanction = id_table_absences.get(row);
                sanction = "Absence";
            }
            case 1 -> {
                row = table_retard.getSelectedRow();
                if (row < 0) {
                    return;
                }
                id_sanction = id_table_retards.get(row);
                sanction = "Retard";
            }
            default -> {
                return;
            }
        }
        AbsenceRetardDialog absenceRetardDialog = new AbsenceRetardDialog(null, true, id_sanction, sanction);
        absenceRetardDialog.setVisible(true);
        table_absence();
        table_retard();
        table_eleve();
    }

    private void remove_sanction() {
        int row_count;
        int[] rows;
        switch (tabbedPane.getSelectedIndex()) {
            case 0 -> {
                row_count = table_absence.getSelectedRowCount();
                if (row_count == 0) {
                    return;
                }
                rows = table_absence.getSelectedRows();
                int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimeé le(s) absence(s) sélectionné(s) ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
                if (choice == 0) {
                    for (int i = 0; i < rows.length; i++) {
                        int row = rows[i];
                        getController().getAbsenceController().remove(id_table_absences.get(row));
                    }
                }
                table_absence();
            }
            case 1 -> {
                row_count = table_retard.getSelectedRowCount();
                if (row_count == 0) {
                    return;
                }
                rows = table_retard.getSelectedRows();
                int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimeé le(s) retard(s) sélectionné(s) ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
                if (choice == 0) {
                    for (int i = 0; i < rows.length; i++) {
                        int row = rows[i];
                        getController().getRetardController().remove(id_table_retards.get(row));
                    }
                }
                table_retard();
            }
            default -> {
                return;
            }
        }
        table_eleve();
    }
}
