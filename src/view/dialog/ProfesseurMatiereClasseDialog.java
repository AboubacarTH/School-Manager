/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.dialog;

import bean.Annee;
import bean.Classe;
import bean.Cycle;
import bean.Matiere;
import bean.MatiereClasse;
import bean.Professeur;
import bean.ProfesseurMatiereClasse;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import static main.Main.getController;

/**
 *
 * @author ATH
 */
public class ProfesseurMatiereClasseDialog extends javax.swing.JDialog {

    /**
     * Creates new form ProfesseurMatiereClasseDialog
     *
     * @param parent
     * @param modal
     */
    public ProfesseurMatiereClasseDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        id_professeurs = new HashMap<>();
        id_annees = new HashMap<>();
        id_cycles = new HashMap<>();
        id_classes = new HashMap<>();
        id_matiere_classes = new HashMap<>();
        initComponents();
        init_combo_box_annee();
        init_combo_box_cycle();
        init_combo_box_classe();
        init_combo_box_matiere();
        init_combo_professeur();
    }

    public ProfesseurMatiereClasseDialog(java.awt.Frame parent, boolean modal, Professeur professeur) {
        super(parent, modal);
        id_professeurs = new HashMap<>();
        id_annees = new HashMap<>();
        id_cycles = new HashMap<>();
        id_classes = new HashMap<>();
        id_matiere_classes = new HashMap<>();
        this.professeur = professeur;
        initComponents();
        init_combo_box_annee();
        init_combo_box_cycle();
        init_combo_box_classe();
        init_combo_box_matiere();
        init_combo_professeur();
        try {
            comboBox_enseignant.setSelectedItem(this.professeur.getNom_prenom());
            comboBox_enseignant.setEditable(false);
        } catch (Exception e) {
        }
    }

    public ProfesseurMatiereClasseDialog(java.awt.Frame parent, boolean modal, ProfesseurMatiereClasse professeurMatiereClasse) {
        super(parent, modal);
        id_professeurs = new HashMap<>();
        id_annees = new HashMap<>();
        id_cycles = new HashMap<>();
        id_classes = new HashMap<>();
        id_matiere_classes = new HashMap<>();
        this.professeurMatiereClasse = professeurMatiereClasse;
        initComponents();
        init_combo_box_annee();
        init_combo_box_cycle();
        init_combo_box_classe();
        init_combo_box_matiere();
        init_combo_professeur();
        try {
            Professeur prof = getController().getProfesseurController().get(this.professeurMatiereClasse.getId_professeur());
            MatiereClasse matiereClasse = getController().getMatiereClasseController().get(this.professeurMatiereClasse.getId_matiere_classe());
            Classe classe = getController().getClasseController().get(matiereClasse.getId_classe());
            Matiere matiere = getController().getMatiereController().get(matiereClasse.getId_matiere());
            Annee annee = getController().getAnneeController().get(classe.getId_annee());
            combo_box_annee.setSelectedItem(annee.getAnnee());
            comboBox_enseignant.setSelectedItem(prof.getNom_prenom());
            comboBox_enseignant.setEditable(false);
            combo_box_cycle.setSelectedItem(getController().getCycleController().get(classe.getId_cycle()).getCycle());
            combo_box_classe.setSelectedItem(classe.getClasse());
            combo_box_matiere.setSelectedItem(matiere.getMatiere());
        } catch (Exception e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        combo_box_annee = new javax.swing.JComboBox<>();
        combo_box_cycle = new javax.swing.JComboBox<>();
        combo_box_classe = new javax.swing.JComboBox<>();
        combo_box_matiere = new javax.swing.JComboBox<>();
        button_cancel = new javax.swing.JButton();
        button_ok = new javax.swing.JButton();
        comboBox_enseignant = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Matière - Enseignant");
        setResizable(false);

        jLabel1.setText("Enseignant :");

        jLabel2.setText("Cycle :");

        jLabel3.setText("Classe :");

        jLabel6.setText("Année scolaire :");

        jLabel7.setText("Matière :");

        combo_box_annee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_annee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_anneeActionPerformed(evt);
            }
        });

        combo_box_cycle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_cycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_cycleActionPerformed(evt);
            }
        });

        combo_box_classe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_classe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_classeActionPerformed(evt);
            }
        });

        combo_box_matiere.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        button_cancel.setText("Cancel");
        button_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_cancelActionPerformed(evt);
            }
        });

        button_ok.setText("OK");
        button_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_okActionPerformed(evt);
            }
        });

        comboBox_enseignant.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(combo_box_cycle, 0, 200, Short.MAX_VALUE)
                    .addComponent(combo_box_classe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combo_box_matiere, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combo_box_annee, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBox_enseignant, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button_ok)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(button_cancel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(combo_box_annee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboBox_enseignant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(combo_box_cycle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(combo_box_classe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(combo_box_matiere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_cancel)
                    .addComponent(button_ok))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void combo_box_anneeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_anneeActionPerformed
        init_combo_box_classe();
        init_combo_box_matiere();
    }//GEN-LAST:event_combo_box_anneeActionPerformed

    private void combo_box_cycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_cycleActionPerformed
        init_combo_box_classe();
        init_combo_box_matiere();
    }//GEN-LAST:event_combo_box_cycleActionPerformed

    private void button_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_okActionPerformed
        action_button_ok();
    }//GEN-LAST:event_button_okActionPerformed

    private void button_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_cancelActionPerformed
        action_button_cancel();
    }//GEN-LAST:event_button_cancelActionPerformed

    private void combo_box_classeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_classeActionPerformed
        init_combo_box_matiere();
    }//GEN-LAST:event_combo_box_classeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(() -> {
            ProfesseurMatiereClasseDialog dialog = new ProfesseurMatiereClasseDialog(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }
    private ProfesseurMatiereClasse professeurMatiereClasse;
    private Professeur professeur;
    private final HashMap<Integer, Long> id_professeurs, id_annees, id_cycles, id_classes, id_matiere_classes;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_cancel;
    private javax.swing.JButton button_ok;
    private javax.swing.JComboBox<String> comboBox_enseignant;
    private javax.swing.JComboBox<String> combo_box_annee;
    private javax.swing.JComboBox<String> combo_box_classe;
    private javax.swing.JComboBox<String> combo_box_cycle;
    private javax.swing.JComboBox<String> combo_box_matiere;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables
    private void init_combo_box_annee() {
        combo_box_annee.removeAllItems();
        id_annees.clear();
        try {
            ArrayList<Annee> list = getController().getAnneeController().gets();
            for (int i = 0; i < list.size(); i++) {
                Annee annee = list.get(i);
                combo_box_annee.addItem(annee.getAnnee());
                id_annees.put(i, annee.getId());

            }
        } catch (Exception e) {
            combo_box_annee.removeAllItems();
            id_annees.clear();
        }
    }

    private void init_combo_box_cycle() {
        combo_box_cycle.removeAllItems();
        id_cycles.clear();
        try {
            ArrayList<Cycle> list = getController().getCycleController().gets();
            for (int i = 0; i < list.size(); i++) {
                Cycle cycle = list.get(i);
                combo_box_cycle.addItem(cycle.getCycle());
                id_cycles.put(i, cycle.getId());
            }
        } catch (Exception e) {
            combo_box_cycle.removeAllItems();
            id_cycles.clear();
        }
    }

    private void init_combo_box_classe() {
        combo_box_classe.removeAllItems();
        id_classes.clear();
        if (combo_box_cycle.getSelectedIndex() < 0 || combo_box_annee.getSelectedIndex() < 0) {
            return;
        }
        try {
            Long id_annee = id_annees.get(combo_box_annee.getSelectedIndex());
            Long id_cycle = id_cycles.get(combo_box_cycle.getSelectedIndex());
            ArrayList<Classe> list = getController().getClasseController().gets(id_annee, id_cycle);
            for (int i = 0; i < list.size(); i++) {
                Classe classe = list.get(i);
                combo_box_classe.addItem(classe.getClasse());
                id_classes.put(i, classe.getId());
            }
        } catch (Exception e) {
            combo_box_classe.removeAllItems();
            id_classes.clear();
        }
    }

    private void init_combo_box_matiere() {
        combo_box_matiere.removeAllItems();
        id_matiere_classes.clear();
        if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0 || combo_box_classe.getSelectedIndex() < 0) {
            return;
        }
        try {
            Long id_cycle = id_cycles.get(combo_box_cycle.getSelectedIndex());
            Long id_classe = id_classes.get(combo_box_classe.getSelectedIndex());
            ArrayList<MatiereClasse> list = getController().getMatiereClasseController().gets(null, null, id_classe, id_cycle);
            for (int i = 0; i < list.size(); i++) {
                MatiereClasse mc = list.get(i);
                Matiere matiere = getController().getMatiereController().get(mc.getId_matiere());
                combo_box_matiere.addItem(matiere.getMatiere());
                id_matiere_classes.put(i, mc.getId());
            }
        } catch (Exception e) {
            combo_box_matiere.removeAllItems();
            id_matiere_classes.clear();
        }
    }

    private void action_button_cancel() {
        dispose();
    }

    private void action_button_ok() {
        if (comboBox_enseignant.getSelectedIndex() < 0 || combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0 || combo_box_classe.getSelectedIndex() < 0 || combo_box_matiere.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs ", "Champ vide ou manquant !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Long id_matiere_classe = id_matiere_classes.get(combo_box_matiere.getSelectedIndex());
        Long id_professeur = id_professeurs.get(comboBox_enseignant.getSelectedIndex());
        ProfesseurMatiereClasse pmc = getController().getProfesseurMatiereClasseController().get(id_matiere_classe, id_professeur);
        if (professeur == null && professeurMatiereClasse == null) {
            if (pmc != null) {
                JOptionPane.showMessageDialog(this, "Veuillez mettre de nouvelles données ", "Champ existant ou erroné !", JOptionPane.ERROR_MESSAGE);
                return;
            }
            getController().getProfesseurMatiereClasseController().add(
                    id_matiere_classe,
                    id_professeur
            );
        } else {
            if (professeur != null && pmc == null) {
                getController().getProfesseurMatiereClasseController().add(
                        id_matiere_classe,
                        professeur.getId()
                );
            }
            if (professeur != null && pmc != null) {
                getController().getProfesseurMatiereClasseController().update(
                        pmc.getId(),
                        id_matiere_classe,
                        professeur.getId()
                );
            }
            if (professeurMatiereClasse != null) {
                getController().getProfesseurMatiereClasseController().update(
                        professeurMatiereClasse.getId(),
                        id_matiere_classe,
                        id_professeur
                );
            }
        }
        JOptionPane.showMessageDialog(this, "Opération effectuée avec success ", "Réussie !", JOptionPane.INFORMATION_MESSAGE);
        //dispose();
    }

    private void init_combo_professeur() {
        id_professeurs.clear();
        comboBox_enseignant.removeAllItems();
        try {
            ArrayList<Professeur> list = getController().getProfesseurController().gets();
            for (int i = 0; i < list.size(); i++) {
                Professeur prof = list.get(i);
                comboBox_enseignant.addItem(prof.getNom_prenom());
                id_professeurs.put(i, prof.getId());
            }
        } catch (Exception e) {
            id_professeurs.clear();
            comboBox_enseignant.removeAllItems();
        }
    }
}
