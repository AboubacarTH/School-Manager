/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.dialog;

import bean.Annee;
import bean.Classe;
import bean.Cycle;
import bean.MontantClasse;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import static main.Main.getController;

/**
 *
 * @author ATH
 */
public class MontantClasseDialog extends javax.swing.JDialog {

    /**
     * Creates new form ProfesseurMatiereClasseDialog
     *
     * @param parent
     * @param modal
     */
    public MontantClasseDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        id_cb_annees = new HashMap<>();
        id_cb_cycles = new HashMap<>();
        id_table_classes = new HashMap<>();
        list_classes = new ArrayList<>();
        this.montantClasse = null;
        initComponents();
        init_combo_box_annee();
        init_combo_box_cycle();
        table_classe();
        popup();
        table_classe_selected();
    }

    public MontantClasseDialog(java.awt.Frame parent, boolean modal, MontantClasse montantClasse) {
        super(parent, modal);
        id_cb_annees = new HashMap<>();
        id_cb_cycles = new HashMap<>();
        id_table_classes = new HashMap<>();
        this.montantClasse = montantClasse;
        list_classes = new ArrayList<>();
        initComponents();
        init_combo_box_annee();
        init_combo_box_cycle();
        popup();
        try {
            Classe classe = getController().getClasseController().get(this.montantClasse.getId_classe());
            id_table_classes.put(0, classe.getId());
            list_classes.add(classe.getId());
            id_cb_cycles.put(0, classe.getId_cycle());
            Annee annee = getController().getAnneeController().get(classe.getId_annee());
            id_cb_annees.put(0, annee.getId());
            combo_box_annee.setSelectedItem(annee.getAnnee());
            combo_box_annee.setEnabled(false);
            combo_box_cycle.setSelectedItem(getController().getCycleController().get(classe.getId_cycle()).getCycle());
            combo_box_cycle.setEnabled(false);
            textField_montant.setText(String.valueOf(this.montantClasse.getMontant()));

        } catch (Exception e) {
            System.out.println(e.getCause());
        }
        table_classe();
        table_classe_selected();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup_add = new javax.swing.JPopupMenu();
        menu_item_add = new javax.swing.JMenuItem();
        popup_remove = new javax.swing.JPopupMenu();
        menu_item_remove = new javax.swing.JMenuItem();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        combo_box_annee = new javax.swing.JComboBox<>();
        combo_box_cycle = new javax.swing.JComboBox<>();
        button_cancel = new javax.swing.JButton();
        button_ok = new javax.swing.JButton();
        jScrollPane_table_classe = new javax.swing.JScrollPane();
        table_classe = new javax.swing.JTable();
        jScrollPane_table_classe_selected = new javax.swing.JScrollPane();
        table_classe_selected = new javax.swing.JTable();
        textField_montant = new javax.swing.JTextField();

        menu_item_add.setText("Ajouter");
        menu_item_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_addActionPerformed(evt);
            }
        });
        popup_add.add(menu_item_add);

        menu_item_remove.setText("Retirer");
        menu_item_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_removeActionPerformed(evt);
            }
        });
        popup_remove.add(menu_item_remove);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Matière - Classe");
        setResizable(false);

        jLabel2.setText("Cycle :");

        jLabel5.setText("Montant :");

        jLabel6.setText("Année scolaire :");

        combo_box_annee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_annee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_anneeActionPerformed(evt);
            }
        });

        combo_box_cycle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_box_cycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_cycleActionPerformed(evt);
            }
        });

        button_cancel.setText("Cancel");
        button_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_cancelActionPerformed(evt);
            }
        });

        button_ok.setText("OK");
        button_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_okActionPerformed(evt);
            }
        });

        table_classe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                " N°", "Classe"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane_table_classe.setViewportView(table_classe);
        if (table_classe.getColumnModel().getColumnCount() > 0) {
            table_classe.getColumnModel().getColumn(0).setMinWidth(35);
            table_classe.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_classe.getColumnModel().getColumn(0).setMaxWidth(35);
        }

        table_classe_selected.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                " N°", "Classe(s) sélectionnée(s)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane_table_classe_selected.setViewportView(table_classe_selected);
        if (table_classe_selected.getColumnModel().getColumnCount() > 0) {
            table_classe_selected.getColumnModel().getColumn(0).setMinWidth(35);
            table_classe_selected.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_classe_selected.getColumnModel().getColumn(0).setMaxWidth(35);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combo_box_cycle, 0, 200, Short.MAX_VALUE)
                            .addComponent(combo_box_annee, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane_table_classe, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                        .addComponent(button_ok)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(button_cancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(textField_montant))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane_table_classe_selected, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane_table_classe_selected, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textField_montant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(button_cancel)
                            .addComponent(button_ok)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(combo_box_annee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(combo_box_cycle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane_table_classe, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void combo_box_anneeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_anneeActionPerformed
        table_classe();
    }//GEN-LAST:event_combo_box_anneeActionPerformed

    private void combo_box_cycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_cycleActionPerformed
        table_classe();
    }//GEN-LAST:event_combo_box_cycleActionPerformed

    private void button_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_okActionPerformed
        action_button_ok();
    }//GEN-LAST:event_button_okActionPerformed

    private void button_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_cancelActionPerformed
        action_button_cancel();
    }//GEN-LAST:event_button_cancelActionPerformed

    private void menu_item_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_addActionPerformed
        add();
    }//GEN-LAST:event_menu_item_addActionPerformed

    private void menu_item_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_removeActionPerformed
        remove();
    }//GEN-LAST:event_menu_item_removeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(() -> {
            MontantClasseDialog dialog = new MontantClasseDialog(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }
    private final MontantClasse montantClasse;
    private final HashMap<Integer, Long> id_cb_annees, id_cb_cycles, id_table_classes;
    private final ArrayList<Long> list_classes;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_cancel;
    private javax.swing.JButton button_ok;
    private javax.swing.JComboBox<String> combo_box_annee;
    private javax.swing.JComboBox<String> combo_box_cycle;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane_table_classe;
    private javax.swing.JScrollPane jScrollPane_table_classe_selected;
    private javax.swing.JMenuItem menu_item_add;
    private javax.swing.JMenuItem menu_item_remove;
    private javax.swing.JPopupMenu popup_add;
    private javax.swing.JPopupMenu popup_remove;
    private javax.swing.JTable table_classe;
    private javax.swing.JTable table_classe_selected;
    private javax.swing.JTextField textField_montant;
    // End of variables declaration//GEN-END:variables
    private static void addPopup(Component component, final JPopupMenu popup) {
        component.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            private void showMenu(MouseEvent e) {
                popup.show(e.getComponent(), e.getX(), e.getY());
            }
        });
    }

    private void popup() {
        addPopup(jScrollPane_table_classe, popup_add);
        addPopup(table_classe, popup_add);
        addPopup(jScrollPane_table_classe_selected, popup_remove);
        addPopup(table_classe_selected, popup_remove);
    }

    private void table_classe_selected() {
        DefaultTableModel model = (DefaultTableModel) table_classe_selected.getModel();
        model.setRowCount(0);
        for (int i = 0; i < list_classes.size(); i++) {
            Object row[] = new Object[2];
            Classe classe = getController().getClasseController().get(list_classes.get(i));
            row[0] = i + 1;
            row[1] = classe.getClasse();
            model.addRow(row);
        }
        table_classe_selected.setModel(model);
        table_classe_selected.setShowVerticalLines(true);
        table_classe_selected.setShowHorizontalLines(true);
    }

    private void table_classe() {
        DefaultTableModel model = (DefaultTableModel) table_classe.getModel();
        model.setRowCount(0);
        id_table_classes.clear();
        if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0) {
            return;
        }
        Long id_annee = id_cb_annees.get(combo_box_annee.getSelectedIndex());
        Long id_cycle = id_cb_cycles.get(combo_box_cycle.getSelectedIndex());
        ArrayList<bean.Classe> list = getController().getClasseController().gets(id_annee, id_cycle);
        for (int i = 0; i < list.size(); i++) {
            Object row[] = new Object[2];
            row[0] = i + 1;
            row[1] = list.get(i).getClasse();
            id_table_classes.put(i, list.get(i).getId());
            model.addRow(row);
        }
        table_classe.setModel(model);
        table_classe.setShowVerticalLines(true);
        table_classe.setShowHorizontalLines(true);
    }

    private void init_combo_box_annee() {
        combo_box_annee.removeAllItems();
        id_cb_annees.clear();
        ArrayList<Annee> list = getController().getAnneeController().gets();
        for (int i = 0; i < list.size(); i++) {
            Annee annee = list.get(i);
            combo_box_annee.addItem(annee.getAnnee());
            id_cb_annees.put(i, annee.getId());
        }
    }

    private void init_combo_box_cycle() {
        combo_box_cycle.removeAllItems();
        id_cb_cycles.clear();
        ArrayList<Cycle> list = getController().getCycleController().gets();
        if (list.size() > 1) {
            combo_box_cycle.addItem("Tous");
            id_cb_cycles.put(0, null);
            for (int i = 0; i < list.size(); i++) {
                Cycle cycle = list.get(i);
                combo_box_cycle.addItem(cycle.getCycle());
                id_cb_cycles.put(i + 1, cycle.getId());
            }
        } else {
            for (int i = 0; i < list.size(); i++) {
                Cycle cycle = list.get(i);
                combo_box_cycle.addItem(cycle.getCycle());
                id_cb_cycles.put(i, cycle.getId());
            }
        }

    }

    private void action_button_cancel() {
        dispose();
    }

    private void action_button_ok() {
        if (combo_box_annee.getSelectedIndex() < 0 || combo_box_cycle.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs ", "Champ vide ou manquant !", JOptionPane.WARNING_MESSAGE);
            return;
        }
        //verifier si la matiere classe existe sinon on le cree
        Double montant = Double.valueOf(textField_montant.getText());
        list_classes.forEach((id_classe) -> {
            MontantClasse mc = getController().getMontantClasseController().get(null, id_classe);
            if (mc == null) {
                getController().getMontantClasseController().add(id_classe, montant);
            } else {
                getController().getMontantClasseController().update(mc.getId(), id_classe, montant);
            }
        });
        JOptionPane.showMessageDialog(this, "Opération effectuée avec success ", "Réussie !", JOptionPane.INFORMATION_MESSAGE);
        //dispose();
    }

    private void add() {
        if (table_classe.getSelectedRowCount() < 0) {
            return;
        }
        for (int i = 0; i < table_classe.getSelectedRows().length; i++) {
            int row = table_classe.getSelectedRows()[i];
            if (!list_classes.contains(id_table_classes.get(row))) {
                list_classes.add(id_table_classes.get(row));
            }
        }
        table_classe_selected();
    }

    private void remove() {
        if (table_classe_selected.getSelectedRowCount() < 0) {
            return;
        }
        ArrayList<Long> list = new ArrayList<>();
        for (int i = 0; i < table_classe_selected.getSelectedRows().length; i++) {
            int row = table_classe_selected.getSelectedRows()[i];
            list.add(list_classes.get(row));
        }
        list.forEach((id_classe) -> {
            list_classes.remove(id_classe);
        });
        table_classe_selected();
    }
}
